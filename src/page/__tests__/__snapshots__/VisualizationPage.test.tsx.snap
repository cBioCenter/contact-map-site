// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`VisualizationPage Should match existing snapshot when given a PDB. 1`] = `
<div
  id="BioblocksVizApp"
  style={
    Object {
      "backgroundColor": "#ffffff",
      "height": "1000px",
    }
  }
>
  <Modal
    centered={true}
    closeOnDimmerClick={true}
    closeOnDocumentClick={false}
    closeOnEscape={true}
    closeOnPortalMouseLeave={true}
    dimmer={true}
    eventPool="Modal"
    onClose={[Function]}
    open={false}
    size="fullscreen"
  >
    <FolderUploadComponent
      onDrop={[Function]}
      style={
        Object {
          "backgroundColor": "lightblue",
          "border": "7px dashed blue",
          "height": "90vmin",
          "textAlign": "center",
        }
      }
    />
  </Modal>
  <ErrorMessageComponent
    couplingScores={
      CouplingContainer {
        "colCounter": 0,
        "contacts": Array [],
        "getCouplingScore": [Function],
        "includes": [Function],
        "indexRange": Object {
          "max": 50,
          "min": 1,
        },
        "rowCounter": 0,
        "scoreSource": "cn",
        "totalStoredContacts": 0,
      }
    }
    errorMsg=""
    mismatches={Array []}
  />
  <Message>
    To get started, please drag and drop onto the page either:
    <br />
    (1) An evcouplings results directory.
    <br />
    (2) Individual .pdb, coupling scores
    <Popup
      content="A file that ends as 'CouplingScores.csv'"
      disabled={false}
      keepInViewPort={true}
      on="hover"
      position="top left"
      trigger={
        <a>
          (?)
        </a>
      }
    />
    , and residue mapping files
    <Popup
      content="A .csv file that starts with 'residue_mapping' - or - A file that ends in .indextable / .indextableplus"
      disabled={false}
      keepInViewPort={true}
      on="hover"
      position="top left"
      trigger={
        <a>
          (?)
        </a>
      }
    />
    .
    <br />
    <br />
     Check out the
    <a
      href="http://evfold.org"
    >
       EVFold
    </a>
     or
    <a
      href="https://evcouplings.org/"
    >
       EVCouplings 
    </a>
     website to get these files.
  </Message>
  <Segment
    attached={true}
    raised={true}
  >
    <Grid
      centered={true}
      padded={true}
      relaxed={true}
    >
      <GridRow
        textAlign="right"
        verticalAlign="bottom"
      >
        <GridColumn
          style={
            Object {
              "height": "100%",
              "width": "auto",
            }
          }
        >
          <Button
            as="button"
            icon="trash"
            label={
              Object {
                "content": "Clean View",
              }
            }
            labelPosition="right"
            onClick={[Function]}
            style={
              Object {
                "height": "100%",
              }
            }
          />
        </GridColumn>
      </GridRow>
      <GridRow>
        <br />
      </GridRow>
      <GridRow
        columns={2}
        verticalAlign="bottom"
      >
        <GridColumn
          width={7}
        >
          <PredictedContactMap
            correctColor="#ff0000"
            data={
              Object {
                "couplingScores": CouplingContainer {
                  "colCounter": 0,
                  "contacts": Array [],
                  "getCouplingScore": [Function],
                  "includes": [Function],
                  "indexRange": Object {
                    "max": 50,
                    "min": 1,
                  },
                  "rowCounter": 0,
                  "scoreSource": "cn",
                  "totalStoredContacts": 0,
                },
                "pdbData": Object {
                  "known": undefined,
                },
                "secondaryStructures": Array [],
              }
            }
            height="100%"
            incorrectColor="#000000"
            isDataLoading={false}
            style={
              Object {
                "backgroundColor": "#ffffff",
              }
            }
            width="100%"
          />
        </GridColumn>
        <GridColumn
          width={7}
        >
          <Connect(NGLContainerClass)
            experimentalProteins={Array []}
            isDataLoading={false}
            measuredProximity="CLOSEST ATOM"
            onMeasuredProximityChange={[Function]}
            predictedProteins={Array []}
          />
        </GridColumn>
      </GridRow>
    </Grid>
  </Segment>
  <footer
    style={
      Object {
        "padding": "25vh 0 25px 25px",
      }
    }
  >
    Powered by 
    <a
      href="https://github.com/cBioCenter/bioblocks-viz"
    >
      Bioblocks
    </a>
    !
  </footer>
</div>
`;

exports[`VisualizationPage Should match existing snapshot when hooked up to a Redux store. 1`] = `
<Provider
  store={
    Object {
      "dispatch": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
      Symbol(observable): [Function],
    }
  }
>
  <Connect(VisualizationPageClass)>
    <VisualizationPageClass
      clearAllResidues={[Function]}
      clearAllSecondaryStructures={[Function]}
      style={
        Object {
          "backgroundColor": "#ffffff",
        }
      }
    >
      <div
        id="BioblocksVizApp"
        style={
          Object {
            "backgroundColor": "#ffffff",
            "height": "1000px",
          }
        }
      >
        <Modal
          centered={true}
          closeOnDimmerClick={true}
          closeOnDocumentClick={false}
          closeOnEscape={true}
          closeOnPortalMouseLeave={true}
          dimmer={true}
          eventPool="Modal"
          onClose={[Function]}
          open={false}
          size="fullscreen"
        >
          <Portal
            closeOnDocumentClick={false}
            closeOnEscape={true}
            closeOnPortalMouseLeave={true}
            eventPool="Modal"
            mountNode={<body />}
            onClose={[Function]}
            onMount={[Function]}
            onOpen={[Function]}
            onUnmount={[Function]}
            open={false}
            openOnTriggerClick={true}
          />
        </Modal>
        <ErrorMessageComponent
          couplingScores={
            CouplingContainer {
              "colCounter": 0,
              "contacts": Array [],
              "getCouplingScore": [Function],
              "includes": [Function],
              "indexRange": Object {
                "max": 50,
                "min": 1,
              },
              "rowCounter": 0,
              "scoreSource": "cn",
              "totalStoredContacts": 0,
            }
          }
          errorMsg=""
          mismatches={Array []}
        />
        <Message>
          <div
            className="ui message"
          >
            To get started, please drag and drop onto the page either:
            <br />
            (1) An evcouplings results directory.
            <br />
            (2) Individual .pdb, coupling scores
            <Popup
              content="A file that ends as 'CouplingScores.csv'"
              disabled={false}
              keepInViewPort={true}
              on="hover"
              position="top left"
              trigger={
                <a>
                  (?)
                </a>
              }
            >
              <Portal
                closeOnDocumentClick={true}
                closeOnEscape={true}
                closeOnTriggerMouseLeave={true}
                eventPool="default"
                mouseEnterDelay={50}
                mouseLeaveDelay={70}
                onClose={[Function]}
                onMount={[Function]}
                onOpen={[Function]}
                onUnmount={[Function]}
                openOnTriggerClick={true}
                openOnTriggerMouseEnter={true}
                trigger={
                  <a>
                    (?)
                  </a>
                }
                triggerRef={[Function]}
              >
                <Ref
                  innerRef={[Function]}
                >
                  <RefFindNode
                    innerRef={[Function]}
                  >
                    <a
                      onBlur={[Function]}
                      onClick={[Function]}
                      onFocus={[Function]}
                      onMouseEnter={[Function]}
                      onMouseLeave={[Function]}
                    >
                      (?)
                    </a>
                  </RefFindNode>
                </Ref>
              </Portal>
            </Popup>
            , and residue mapping files
            <Popup
              content="A .csv file that starts with 'residue_mapping' - or - A file that ends in .indextable / .indextableplus"
              disabled={false}
              keepInViewPort={true}
              on="hover"
              position="top left"
              trigger={
                <a>
                  (?)
                </a>
              }
            >
              <Portal
                closeOnDocumentClick={true}
                closeOnEscape={true}
                closeOnTriggerMouseLeave={true}
                eventPool="default"
                mouseEnterDelay={50}
                mouseLeaveDelay={70}
                onClose={[Function]}
                onMount={[Function]}
                onOpen={[Function]}
                onUnmount={[Function]}
                openOnTriggerClick={true}
                openOnTriggerMouseEnter={true}
                trigger={
                  <a>
                    (?)
                  </a>
                }
                triggerRef={[Function]}
              >
                <Ref
                  innerRef={[Function]}
                >
                  <RefFindNode
                    innerRef={[Function]}
                  >
                    <a
                      onBlur={[Function]}
                      onClick={[Function]}
                      onFocus={[Function]}
                      onMouseEnter={[Function]}
                      onMouseLeave={[Function]}
                    >
                      (?)
                    </a>
                  </RefFindNode>
                </Ref>
              </Portal>
            </Popup>
            .
            <br />
            <br />
             Check out the
            <a
              href="http://evfold.org"
            >
               EVFold
            </a>
             or
            <a
              href="https://evcouplings.org/"
            >
               EVCouplings 
            </a>
             website to get these files.
          </div>
        </Message>
        <Segment
          attached={true}
          raised={true}
        >
          <div
            className="ui raised attached segment"
          >
            <Grid
              centered={true}
              padded={true}
              relaxed={true}
            >
              <div
                className="ui centered padded relaxed grid"
              >
                <GridRow
                  textAlign="right"
                  verticalAlign="bottom"
                >
                  <div
                    className="right aligned bottom aligned row"
                  >
                    <GridColumn
                      style={
                        Object {
                          "height": "100%",
                          "width": "auto",
                        }
                      }
                    >
                      <div
                        className="column"
                        style={
                          Object {
                            "height": "100%",
                            "width": "auto",
                          }
                        }
                      >
                        <Button
                          as="button"
                          icon="trash"
                          label={
                            Object {
                              "content": "Clean View",
                            }
                          }
                          labelPosition="right"
                          onClick={[Function]}
                          style={
                            Object {
                              "height": "100%",
                            }
                          }
                        >
                          <div
                            className="ui right labeled button"
                            onClick={[Function]}
                            style={
                              Object {
                                "height": "100%",
                              }
                            }
                          >
                            <button
                              className="ui icon button"
                              tabIndex={0}
                            >
                              <Icon
                                as="i"
                                name="trash"
                              >
                                <i
                                  aria-hidden="true"
                                  className="trash icon"
                                  onClick={[Function]}
                                />
                              </Icon>
                               
                            </button>
                            <Label
                              basic={true}
                              content="Clean View"
                              pointing="left"
                            >
                              <div
                                className="ui left pointing basic label"
                                onClick={[Function]}
                              >
                                Clean View
                              </div>
                            </Label>
                          </div>
                        </Button>
                      </div>
                    </GridColumn>
                  </div>
                </GridRow>
                <GridRow>
                  <div
                    className="row"
                  >
                    <br />
                  </div>
                </GridRow>
                <GridRow
                  columns={2}
                  verticalAlign="bottom"
                >
                  <div
                    className="bottom aligned two column row"
                  >
                    <GridColumn
                      width={7}
                    >
                      <div
                        className="seven wide column"
                      >
                        <PredictedContactMap
                          correctColor="#ff0000"
                          data={
                            Object {
                              "couplingScores": CouplingContainer {
                                "colCounter": 0,
                                "contacts": Array [],
                                "getCouplingScore": [Function],
                                "includes": [Function],
                                "indexRange": Object {
                                  "max": 50,
                                  "min": 1,
                                },
                                "rowCounter": 0,
                                "scoreSource": "cn",
                                "totalStoredContacts": 0,
                              },
                              "pdbData": Object {
                                "known": undefined,
                              },
                              "secondaryStructures": Array [],
                            }
                          }
                          height="100%"
                          incorrectColor="#000000"
                          isDataLoading={false}
                          style={
                            Object {
                              "backgroundColor": "#ffffff",
                            }
                          }
                          width="100%"
                        >
                          <div
                            className="PredictedContactMapComponent"
                            style={
                              Object {
                                "backgroundColor": "#ffffff",
                              }
                            }
                          >
                            <Connect(ContactMapClass)
                              configurations={
                                Array [
                                  Object {
                                    "name": "Linear Distance Filter (|i - j|)",
                                    "onChange": [Function],
                                    "type": "SLIDER",
                                    "values": Object {
                                      "current": 5,
                                      "defaultValue": 5,
                                      "max": 10,
                                      "min": 1,
                                    },
                                  },
                                  Object {
                                    "name": "Top N Predictions to Show",
                                    "onChange": [Function],
                                    "type": "SLIDER",
                                    "values": Object {
                                      "current": 25,
                                      "defaultValue": 100,
                                      "max": 50,
                                      "min": 1,
                                    },
                                  },
                                ]
                              }
                              correctColor="#ff0000"
                              data={
                                Object {
                                  "couplingScores": CouplingContainer {
                                    "colCounter": 0,
                                    "contacts": Array [],
                                    "getCouplingScore": [Function],
                                    "includes": [Function],
                                    "indexRange": Object {
                                      "max": 50,
                                      "min": 1,
                                    },
                                    "rowCounter": 0,
                                    "scoreSource": "cn",
                                    "totalStoredContacts": 0,
                                  },
                                  "pdbData": Object {
                                    "known": undefined,
                                  },
                                  "secondaryStructures": Array [],
                                }
                              }
                              formattedPoints={
                                Array [
                                  Object {
                                    "hoverinfo": "text",
                                    "marker": Object {
                                      "color": Array [],
                                    },
                                    "mode": "lines+markers",
                                    "name": "Predicted Contact",
                                    "nodeSize": 4,
                                    "points": Array [],
                                    "subtitle": "(N=25, L=50)",
                                    "text": Array [],
                                  },
                                  Object {
                                    "hoverinfo": "text",
                                    "marker": Object {
                                      "color": Array [],
                                    },
                                    "mode": "lines+markers",
                                    "name": "Correct Prediction",
                                    "nodeSize": 6,
                                    "points": Array [],
                                    "subtitle": "(N=0, NaN%)",
                                    "text": Array [],
                                  },
                                ]
                              }
                              height="100%"
                              incorrectColor="#000000"
                              isDataLoading={false}
                              width="100%"
                            >
                              <ContactMapClass
                                addHoveredResidues={[Function]}
                                addHoveredSecondaryStructure={[Function]}
                                addSelectedSecondaryStructure={[Function]}
                                candidateResidues={Array []}
                                configurations={
                                  Array [
                                    Object {
                                      "name": "Linear Distance Filter (|i - j|)",
                                      "onChange": [Function],
                                      "type": "SLIDER",
                                      "values": Object {
                                        "current": 5,
                                        "defaultValue": 5,
                                        "max": 10,
                                        "min": 1,
                                      },
                                    },
                                    Object {
                                      "name": "Top N Predictions to Show",
                                      "onChange": [Function],
                                      "type": "SLIDER",
                                      "values": Object {
                                        "current": 25,
                                        "defaultValue": 100,
                                        "max": 50,
                                        "min": 1,
                                      },
                                    },
                                  ]
                                }
                                correctColor="#ff0000"
                                data={
                                  Object {
                                    "couplingScores": CouplingContainer {
                                      "colCounter": 0,
                                      "contacts": Array [],
                                      "getCouplingScore": [Function],
                                      "includes": [Function],
                                      "indexRange": Object {
                                        "max": 50,
                                        "min": 1,
                                      },
                                      "rowCounter": 0,
                                      "scoreSource": "cn",
                                      "totalStoredContacts": 0,
                                    },
                                    "pdbData": Object {
                                      "known": undefined,
                                    },
                                    "secondaryStructures": Array [],
                                  }
                                }
                                enableSliders={true}
                                formattedPoints={
                                  Array [
                                    Object {
                                      "hoverinfo": "text",
                                      "marker": Object {
                                        "color": Array [],
                                      },
                                      "mode": "lines+markers",
                                      "name": "Predicted Contact",
                                      "nodeSize": 4,
                                      "points": Array [],
                                      "subtitle": "(N=25, L=50)",
                                      "text": Array [],
                                    },
                                    Object {
                                      "hoverinfo": "text",
                                      "marker": Object {
                                        "color": Array [],
                                      },
                                      "mode": "lines+markers",
                                      "name": "Correct Prediction",
                                      "nodeSize": 6,
                                      "points": Array [],
                                      "subtitle": "(N=0, NaN%)",
                                      "text": Array [],
                                    },
                                  ]
                                }
                                height="100%"
                                highlightColor="#ff8800"
                                hoveredResidues={Array []}
                                hoveredSecondaryStructures={Array []}
                                incorrectColor="#000000"
                                isDataLoading={false}
                                lockedResiduePairs={Object {}}
                                observedColor="#0000ff"
                                removeAllLockedResiduePairs={[Function]}
                                removeHoveredResidues={[Function]}
                                removeHoveredSecondaryStructure={[Function]}
                                removeSecondaryStructure={[Function]}
                                selectedSecondaryStructures={Array []}
                                showConfigurations={true}
                                toggleLockedResiduePair={[Function]}
                                width="100%"
                              >
                                <ComponentCard
                                  componentName="Contact Map"
                                  frameHeight={0}
                                  frameWidth={0}
                                  headerHeight={40}
                                  height="570px"
                                  iconSrc="assets/icons/spring-icon.png"
                                  isFramedComponent={false}
                                  isFullPage={false}
                                  menuItems={
                                    Array [
                                      Object {
                                        "component": Object {
                                          "configs": Array [
                                            Object {
                                              "name": "Clear Selections",
                                              "onClick": [Function],
                                              "type": "BUTTON",
                                            },
                                            Object {
                                              "name": "Linear Distance Filter (|i - j|)",
                                              "onChange": [Function],
                                              "type": "SLIDER",
                                              "values": Object {
                                                "current": 5,
                                                "defaultValue": 5,
                                                "max": 10,
                                                "min": 1,
                                              },
                                            },
                                            Object {
                                              "name": "Top N Predictions to Show",
                                              "onChange": [Function],
                                              "type": "SLIDER",
                                              "values": Object {
                                                "current": 25,
                                                "defaultValue": 100,
                                                "max": 50,
                                                "min": 1,
                                              },
                                            },
                                            Object {
                                              "id": "node-size-slider-0",
                                              "name": "Node size for Predicted Structure Contact",
                                              "onChange": [Function],
                                              "type": "SLIDER",
                                              "values": Object {
                                                "current": 4,
                                                "defaultValue": 4,
                                                "max": 20,
                                                "min": 1,
                                              },
                                            },
                                            Object {
                                              "id": "node-size-slider-1",
                                              "name": "Node size for Predicted Contact",
                                              "onChange": [Function],
                                              "type": "SLIDER",
                                              "values": Object {
                                                "current": 4,
                                                "defaultValue": 4,
                                                "max": 20,
                                                "min": 1,
                                              },
                                            },
                                            Object {
                                              "id": "node-size-slider-2",
                                              "name": "Node size for Correct Prediction",
                                              "onChange": [Function],
                                              "type": "SLIDER",
                                              "values": Object {
                                                "current": 6,
                                                "defaultValue": 4,
                                                "max": 20,
                                                "min": 1,
                                              },
                                            },
                                            Object {
                                              "id": "node-size-slider-3",
                                              "name": "Node size for Selected Residue Pairs",
                                              "onChange": [Function],
                                              "type": "SLIDER",
                                              "values": Object {
                                                "current": 4,
                                                "defaultValue": 4,
                                                "max": 20,
                                                "min": 1,
                                              },
                                            },
                                          ],
                                          "name": "POPUP",
                                        },
                                        "description": "Settings",
                                      },
                                    ]
                                  }
                                  padding={0}
                                  showSettings={false}
                                  width="525px"
                                >
                                  <Card
                                    centered={true}
                                    className="bioblocks-component-card"
                                    style={
                                      Object {
                                        "height": "570px",
                                        "maxWidth": "unset",
                                        "width": "525px",
                                      }
                                    }
                                  >
                                    <div
                                      className="ui centered card bioblocks-component-card"
                                      onClick={[Function]}
                                      style={
                                        Object {
                                          "height": "570px",
                                          "maxWidth": "unset",
                                          "width": "525px",
                                        }
                                      }
                                    >
                                      <ComponentMenuBar
                                        componentName="Contact Map"
                                        configurations={Array []}
                                        height={40}
                                        iconSrc="assets/icons/spring-icon.png"
                                        isExpanded={false}
                                        menuItems={
                                          Array [
                                            Object {
                                              "component": Object {
                                                "configs": Array [
                                                  Object {
                                                    "name": "Clear Selections",
                                                    "onClick": [Function],
                                                    "type": "BUTTON",
                                                  },
                                                  Object {
                                                    "name": "Linear Distance Filter (|i - j|)",
                                                    "onChange": [Function],
                                                    "type": "SLIDER",
                                                    "values": Object {
                                                      "current": 5,
                                                      "defaultValue": 5,
                                                      "max": 10,
                                                      "min": 1,
                                                    },
                                                  },
                                                  Object {
                                                    "name": "Top N Predictions to Show",
                                                    "onChange": [Function],
                                                    "type": "SLIDER",
                                                    "values": Object {
                                                      "current": 25,
                                                      "defaultValue": 100,
                                                      "max": 50,
                                                      "min": 1,
                                                    },
                                                  },
                                                  Object {
                                                    "id": "node-size-slider-0",
                                                    "name": "Node size for Predicted Structure Contact",
                                                    "onChange": [Function],
                                                    "type": "SLIDER",
                                                    "values": Object {
                                                      "current": 4,
                                                      "defaultValue": 4,
                                                      "max": 20,
                                                      "min": 1,
                                                    },
                                                  },
                                                  Object {
                                                    "id": "node-size-slider-1",
                                                    "name": "Node size for Predicted Contact",
                                                    "onChange": [Function],
                                                    "type": "SLIDER",
                                                    "values": Object {
                                                      "current": 4,
                                                      "defaultValue": 4,
                                                      "max": 20,
                                                      "min": 1,
                                                    },
                                                  },
                                                  Object {
                                                    "id": "node-size-slider-2",
                                                    "name": "Node size for Correct Prediction",
                                                    "onChange": [Function],
                                                    "type": "SLIDER",
                                                    "values": Object {
                                                      "current": 6,
                                                      "defaultValue": 4,
                                                      "max": 20,
                                                      "min": 1,
                                                    },
                                                  },
                                                  Object {
                                                    "id": "node-size-slider-3",
                                                    "name": "Node size for Selected Residue Pairs",
                                                    "onChange": [Function],
                                                    "type": "SLIDER",
                                                    "values": Object {
                                                      "current": 4,
                                                      "defaultValue": 4,
                                                      "max": 20,
                                                      "min": 1,
                                                    },
                                                  },
                                                ],
                                                "name": "POPUP",
                                              },
                                              "description": "Settings",
                                            },
                                          ]
                                        }
                                        onExpandToggleCb={[Function]}
                                        opacity={0.85}
                                        width="100%"
                                      >
                                        <div
                                          onMouseEnter={[Function]}
                                          onMouseLeave={[Function]}
                                        >
                                          <Menu
                                            secondary={true}
                                            style={
                                              Object {
                                                "height": 40,
                                                "margin": 0,
                                              }
                                            }
                                            widths={2}
                                          >
                                            <div
                                              className="ui secondary two item menu"
                                              style={
                                                Object {
                                                  "height": 40,
                                                  "margin": 0,
                                                }
                                              }
                                            >
                                              <Menu
                                                secondary={true}
                                                widths={1}
                                              >
                                                <div
                                                  className="ui secondary one item menu"
                                                >
                                                  <MenuItem
                                                    fitted="horizontally"
                                                    position="left"
                                                    style={
                                                      Object {
                                                        "margin": 0,
                                                        "padding": 0,
                                                      }
                                                    }
                                                  >
                                                    <div
                                                      className="left horizontally fitted item"
                                                      onClick={[Function]}
                                                      style={
                                                        Object {
                                                          "margin": 0,
                                                          "padding": 0,
                                                        }
                                                      }
                                                    >
                                                      <img
                                                        alt="component icon"
                                                        src="assets/icons/spring-icon.png"
                                                        style={
                                                          Object {
                                                            "height": "32px",
                                                            "padding": "2px",
                                                            "width": "32px",
                                                          }
                                                        }
                                                      />
                                                      Contact Map
                                                    </div>
                                                  </MenuItem>
                                                </div>
                                              </Menu>
                                              <Menu
                                                secondary={true}
                                                widths={4}
                                              >
                                                <div
                                                  className="ui secondary four item menu"
                                                >
                                                  <MenuItem
                                                    fitted="horizontally"
                                                    key="Contact Map-menu-item-0"
                                                    position="right"
                                                    style={
                                                      Object {
                                                        "flexDirection": "column",
                                                      }
                                                    }
                                                  >
                                                    <div
                                                      className="right horizontally fitted item"
                                                      onClick={[Function]}
                                                      style={
                                                        Object {
                                                          "flexDirection": "column",
                                                        }
                                                      }
                                                    >
                                                      <Popup
                                                        closeOnPortalMouseLeave={false}
                                                        closeOnTriggerClick={true}
                                                        closeOnTriggerMouseLeave={false}
                                                        disabled={false}
                                                        hoverable={false}
                                                        keepInViewPort={true}
                                                        on="hover"
                                                        openOnTriggerClick={true}
                                                        openOnTriggerFocus={false}
                                                        openOnTriggerMouseEnter={false}
                                                        position="bottom center"
                                                        style={
                                                          Object {
                                                            "opacity": 0.85,
                                                          }
                                                        }
                                                        trigger={
                                                          <Icon
                                                            as="i"
                                                            name="setting"
                                                          />
                                                        }
                                                        wide={true}
                                                      >
                                                        <Portal
                                                          closeOnDocumentClick={true}
                                                          closeOnEscape={true}
                                                          closeOnPortalMouseLeave={false}
                                                          closeOnTriggerClick={true}
                                                          closeOnTriggerMouseLeave={false}
                                                          eventPool="default"
                                                          mouseEnterDelay={50}
                                                          mouseLeaveDelay={70}
                                                          onClose={[Function]}
                                                          onMount={[Function]}
                                                          onOpen={[Function]}
                                                          onUnmount={[Function]}
                                                          openOnTriggerClick={true}
                                                          openOnTriggerFocus={false}
                                                          openOnTriggerMouseEnter={false}
                                                          trigger={
                                                            <Icon
                                                              as="i"
                                                              name="setting"
                                                            />
                                                          }
                                                          triggerRef={[Function]}
                                                        >
                                                          <Ref
                                                            innerRef={[Function]}
                                                          >
                                                            <RefFindNode
                                                              innerRef={[Function]}
                                                            >
                                                              <Icon
                                                                as="i"
                                                                name="setting"
                                                                onBlur={[Function]}
                                                                onClick={[Function]}
                                                                onFocus={[Function]}
                                                                onMouseEnter={[Function]}
                                                                onMouseLeave={[Function]}
                                                              >
                                                                <i
                                                                  aria-hidden="true"
                                                                  className="setting icon"
                                                                  onBlur={[Function]}
                                                                  onClick={[Function]}
                                                                  onFocus={[Function]}
                                                                  onMouseEnter={[Function]}
                                                                  onMouseLeave={[Function]}
                                                                />
                                                              </Icon>
                                                            </RefFindNode>
                                                          </Ref>
                                                        </Portal>
                                                      </Popup>
                                                      <span
                                                        style={
                                                          Object {
                                                            "fontSize": "11px",
                                                            "visibility": "hidden",
                                                          }
                                                        }
                                                      >
                                                        Settings
                                                      </span>
                                                    </div>
                                                  </MenuItem>
                                                  <MenuItem
                                                    fitted="horizontally"
                                                    position="right"
                                                    style={
                                                      Object {
                                                        "flexDirection": "column",
                                                      }
                                                    }
                                                  >
                                                    <div
                                                      className="right horizontally fitted item"
                                                      onClick={[Function]}
                                                      style={
                                                        Object {
                                                          "flexDirection": "column",
                                                        }
                                                      }
                                                    >
                                                      <Icon
                                                        as="i"
                                                        name="expand arrows alternate"
                                                        onClick={[Function]}
                                                      >
                                                        <i
                                                          aria-hidden="true"
                                                          className="expand arrows alternate icon"
                                                          onClick={[Function]}
                                                        />
                                                      </Icon>
                                                      <span
                                                        style={
                                                          Object {
                                                            "fontSize": "11px",
                                                            "visibility": "hidden",
                                                          }
                                                        }
                                                      >
                                                        Expand
                                                      </span>
                                                    </div>
                                                  </MenuItem>
                                                </div>
                                              </Menu>
                                            </div>
                                          </Menu>
                                        </div>
                                      </ComponentMenuBar>
                                      <ContactMapChart
                                        candidateResidues={Array []}
                                        configurations={Array []}
                                        contactData={
                                          Array [
                                            Object {
                                              "hoverinfo": "text",
                                              "marker": Object {
                                                "colorscale": Array [
                                                  Array [
                                                    0,
                                                    "rgb(12,50,102)",
                                                  ],
                                                  Array [
                                                    0.1,
                                                    "rgb(17,83,150)",
                                                  ],
                                                  Array [
                                                    0.2,
                                                    "rgb(40,114,175)",
                                                  ],
                                                  Array [
                                                    0.3,
                                                    "rgb(71,147,193)",
                                                  ],
                                                  Array [
                                                    0.4,
                                                    "rgb(111,175,209)",
                                                  ],
                                                  Array [
                                                    0.5,
                                                    "rgb(160,202,222)",
                                                  ],
                                                  Array [
                                                    0.6,
                                                    "rgb(200,219,237)",
                                                  ],
                                                  Array [
                                                    0.7,
                                                    "rgb(224,235,246)",
                                                  ],
                                                  Array [
                                                    0.8,
                                                    "rgb(247,251,255)",
                                                  ],
                                                  Array [
                                                    0.9,
                                                    "rgb(249,253,255)",
                                                  ],
                                                  Array [
                                                    1,
                                                    "rgb(255,255,255)",
                                                  ],
                                                ],
                                              },
                                              "mode": "lines+markers",
                                              "name": "Predicted Structure Contact",
                                              "nodeSize": 4,
                                              "points": Array [],
                                              "subtitle": "(from PDB structure)",
                                              "text": Array [],
                                            },
                                            Object {
                                              "hoverinfo": "text",
                                              "marker": Object {
                                                "color": Array [],
                                              },
                                              "mode": "lines+markers",
                                              "name": "Predicted Contact",
                                              "nodeSize": 4,
                                              "points": Array [],
                                              "subtitle": "(N=25, L=50)",
                                              "text": Array [],
                                            },
                                            Object {
                                              "hoverinfo": "text",
                                              "marker": Object {
                                                "color": Array [],
                                              },
                                              "mode": "lines+markers",
                                              "name": "Correct Prediction",
                                              "nodeSize": 6,
                                              "points": Array [],
                                              "subtitle": "(N=0, NaN%)",
                                              "text": Array [],
                                            },
                                            Object {
                                              "hoverinfo": "none",
                                              "marker": Object {
                                                "color": Array [],
                                                "line": Object {
                                                  "color": "#ff8800",
                                                  "width": 3,
                                                },
                                                "symbol": "circle-open",
                                              },
                                              "mode": "lines+markers",
                                              "name": "Selected Residue Pairs",
                                              "nodeSize": 4,
                                              "points": Array [],
                                              "subtitle": "",
                                            },
                                          ]
                                        }
                                        dataTransformFn={[Function]}
                                        height="100%"
                                        isDataLoading={false}
                                        legendModifiers={
                                          Object {
                                            "y": -0.4,
                                          }
                                        }
                                        marginModifiers={
                                          Object {
                                            "b": 65,
                                            "l": 65,
                                          }
                                        }
                                        onClickCallback={[Function]}
                                        onHoverCallback={[Function]}
                                        onSelectedCallback={[Function]}
                                        onUnHoverCallback={[Function]}
                                        range={70}
                                        secondaryStructures={Array []}
                                        selectedSecondaryStructures={
                                          Array [
                                            Array [],
                                          ]
                                        }
                                        selectedSecondaryStructuresColor="#feb83f"
                                        showConfigurations={true}
                                        width="100%"
                                      >
                                        <PlotlyChart
                                          candidateResidues={Array []}
                                          config={Object {}}
                                          data={
                                            Array [
                                              Object {
                                                "hoverinfo": "text",
                                                "marker": Object {
                                                  "color": Array [],
                                                  "colorscale": Array [
                                                    Array [
                                                      0,
                                                      "rgb(12,50,102)",
                                                    ],
                                                    Array [
                                                      0.1,
                                                      "rgb(17,83,150)",
                                                    ],
                                                    Array [
                                                      0.2,
                                                      "rgb(40,114,175)",
                                                    ],
                                                    Array [
                                                      0.3,
                                                      "rgb(71,147,193)",
                                                    ],
                                                    Array [
                                                      0.4,
                                                      "rgb(111,175,209)",
                                                    ],
                                                    Array [
                                                      0.5,
                                                      "rgb(160,202,222)",
                                                    ],
                                                    Array [
                                                      0.6,
                                                      "rgb(200,219,237)",
                                                    ],
                                                    Array [
                                                      0.7,
                                                      "rgb(224,235,246)",
                                                    ],
                                                    Array [
                                                      0.8,
                                                      "rgb(247,251,255)",
                                                    ],
                                                    Array [
                                                      0.9,
                                                      "rgb(249,253,255)",
                                                    ],
                                                    Array [
                                                      1,
                                                      "rgb(255,255,255)",
                                                    ],
                                                  ],
                                                  "size": 4,
                                                },
                                                "mode": "markers",
                                                "name": "Predicted Structure Contact (from PDB structure)",
                                                "text": Array [],
                                                "type": "scattergl",
                                                "x": Array [],
                                                "y": Array [],
                                                "z": Array [],
                                              },
                                              Object {
                                                "hoverinfo": "text",
                                                "marker": Object {
                                                  "color": Array [],
                                                  "size": 4,
                                                },
                                                "mode": "markers",
                                                "name": "Predicted Contact (N=25, L=50)",
                                                "text": Array [],
                                                "type": "scattergl",
                                                "x": Array [],
                                                "y": Array [],
                                                "z": Array [],
                                              },
                                              Object {
                                                "hoverinfo": "text",
                                                "marker": Object {
                                                  "color": Array [],
                                                  "size": 6,
                                                },
                                                "mode": "markers",
                                                "name": "Correct Prediction (N=0, NaN%)",
                                                "text": Array [],
                                                "type": "scattergl",
                                                "x": Array [],
                                                "y": Array [],
                                                "z": Array [],
                                              },
                                              Object {
                                                "hoverinfo": "none",
                                                "marker": Object {
                                                  "color": Array [],
                                                  "line": Object {
                                                    "color": "#ff8800",
                                                    "width": 3,
                                                  },
                                                  "size": 4,
                                                  "symbol": "circle-open",
                                                },
                                                "mode": "markers",
                                                "name": "Selected Residue Pairs ",
                                                "text": Array [],
                                                "type": "scattergl",
                                                "x": Array [],
                                                "y": Array [],
                                                "z": Array [],
                                              },
                                            ]
                                          }
                                          dataTransformFn={[Function]}
                                          height="100%"
                                          layout={
                                            Object {
                                              "legend": Object {
                                                "orientation": "h",
                                                "y": -0.4,
                                                "yanchor": "bottom",
                                              },
                                              "margin": Object {
                                                "b": 65,
                                                "l": 65,
                                              },
                                              "showlegend": false,
                                              "xaxis": Object {
                                                "autorange": true,
                                                "fixedrange": true,
                                                "nticks": 10,
                                                "range": Array [
                                                  0,
                                                  33000,
                                                ],
                                                "rangemode": "nonnegative",
                                                "showline": true,
                                                "tickmode": "auto",
                                                "title": "Residue #",
                                              },
                                              "yaxis": Object {
                                                "autorange": "reversed",
                                                "fixedrange": true,
                                                "nticks": 10,
                                                "range": Array [
                                                  0,
                                                  33000,
                                                ],
                                                "rangemode": "nonnegative",
                                                "showline": true,
                                                "tickmode": "auto",
                                                "title": "Residue #",
                                              },
                                            }
                                          }
                                          onClickCallback={[Function]}
                                          onHoverCallback={[Function]}
                                          onSelectedCallback={[Function]}
                                          onUnHoverCallback={[Function]}
                                          secondaryStructures={Array []}
                                          selectedSecondaryStructures={
                                            Array [
                                              Array [],
                                            ]
                                          }
                                          selectedSecondaryStructuresColor="#feb83f"
                                          showLoader={false}
                                          width="100%"
                                        >
                                          <div
                                            className="plotly-chart"
                                            style={
                                              Object {
                                                "height": "100%",
                                                "marginBottom": 5,
                                                "width": "100%",
                                              }
                                            }
                                          />
                                        </PlotlyChart>
                                      </ContactMapChart>
                                    </div>
                                  </Card>
                                </ComponentCard>
                              </ContactMapClass>
                            </Connect(ContactMapClass)>
                          </div>
                        </PredictedContactMap>
                      </div>
                    </GridColumn>
                    <GridColumn
                      width={7}
                    >
                      <div
                        className="seven wide column"
                      >
                        <Connect(NGLContainerClass)
                          experimentalProteins={Array []}
                          isDataLoading={false}
                          measuredProximity="CLOSEST ATOM"
                          onMeasuredProximityChange={[Function]}
                          predictedProteins={Array []}
                        >
                          <NGLContainerClass
                            addCandidateResidues={[Function]}
                            addHoveredResidues={[Function]}
                            addLockedResiduePair={[Function]}
                            candidateResidues={Array []}
                            dispatchNglFetch={[Function]}
                            experimentalProteins={Array []}
                            hoveredResidues={Array []}
                            hoveredSecondaryStructures={Array []}
                            isDataLoading={false}
                            lockedResiduePairs={Immutable.Map {}}
                            maxPDBPerPopup={5}
                            measuredProximity="CLOSEST ATOM"
                            onMeasuredProximityChange={[Function]}
                            predictedProteins={Array []}
                            removeAllLockedResiduePairs={[Function]}
                            removeCandidateResidues={[Function]}
                            removeHoveredResidues={[Function]}
                            removeLockedResiduePair={[Function]}
                            removeNonLockedResidues={[Function]}
                            selectedSecondaryStructures={Array []}
                            showConfigurations={true}
                          >
                            <Grid
                              padded={true}
                            >
                              <div
                                className="ui padded grid"
                              >
                                <GridRow>
                                  <div
                                    className="row"
                                  >
                                    <NGLComponent
                                      addCandidateResidues={[Function]}
                                      addHoveredResidues={[Function]}
                                      addLockedResiduePair={[Function]}
                                      backgroundColor="#ffffff"
                                      candidateResidues={Array []}
                                      dispatchNglFetch={[Function]}
                                      experimentalProteins={Array []}
                                      height="92%"
                                      hoveredResidues={Array []}
                                      hoveredSecondaryStructures={Array []}
                                      isDataLoading={false}
                                      lockedResiduePairs={Object {}}
                                      maxPDBPerPopup={5}
                                      measuredProximity="CLOSEST ATOM"
                                      menuItems={
                                        Array [
                                          Object {
                                            "component": Object {
                                              "name": "POPUP",
                                              "props": Object {
                                                "children": <Grid
                                                  divided={true}
                                                  padded={true}
                                                >
                                                  <GridRow>
                                                    <GridColumn>
                                                      <Header>
                                                        Select Structures to Display
                                                      </Header>
                                                    </GridColumn>
                                                  </GridRow>
                                                  <GridRow
                                                    columns={2}
                                                    style={
                                                      Object {
                                                        "padding": "5px 0",
                                                      }
                                                    }
                                                  >
                                                    <GridColumn
                                                      width={9}
                                                    >
                                                      Experimental (0/0)
                                                      <div
                                                        style={
                                                          Object {
                                                            "height": "250px",
                                                            "overflow": "auto",
                                                          }
                                                        }
                                                      >
                                                        <Table
                                                          as="table"
                                                          basic="very"
                                                          compact={true}
                                                          padded={true}
                                                        >
                                                          <TableHeader
                                                            as="thead"
                                                          >
                                                            <TableRow
                                                              as="tr"
                                                              cellAs="td"
                                                            >
                                                              <TableHeaderCell
                                                                as="th"
                                                                style={
                                                                  Object {
                                                                    "padding": "5px 0",
                                                                  }
                                                                }
                                                              >
                                                                Name
                                                              </TableHeaderCell>
                                                              <TableHeaderCell
                                                                as="th"
                                                                style={
                                                                  Object {
                                                                    "padding": "5px 0",
                                                                  }
                                                                }
                                                              >
                                                                Seq. ID
                                                              </TableHeaderCell>
                                                              <TableHeaderCell
                                                                as="th"
                                                                style={
                                                                  Object {
                                                                    "padding": "5px 0",
                                                                  }
                                                                }
                                                              >
                                                                Source
                                                              </TableHeaderCell>
                                                            </TableRow>
                                                          </TableHeader>
                                                          <TableBody
                                                            as="tbody"
                                                          />
                                                        </Table>
                                                      </div>
                                                    </GridColumn>
                                                    <GridColumn
                                                      width={7}
                                                    >
                                                      Predicted (0/0)
                                                      <div
                                                        style={
                                                          Object {
                                                            "height": "250px",
                                                            "overflow": "auto",
                                                          }
                                                        }
                                                      >
                                                        <Table
                                                          as="table"
                                                          basic="very"
                                                          compact={true}
                                                          padded={true}
                                                        >
                                                          <TableHeader
                                                            as="thead"
                                                          >
                                                            <TableRow
                                                              as="tr"
                                                              cellAs="td"
                                                            >
                                                              <TableHeaderCell
                                                                as="th"
                                                                style={
                                                                  Object {
                                                                    "padding": "5px 0",
                                                                  }
                                                                }
                                                              >
                                                                Name
                                                              </TableHeaderCell>
                                                              <TableHeaderCell
                                                                as="th"
                                                                style={
                                                                  Object {
                                                                    "padding": "5px 0",
                                                                  }
                                                                }
                                                              >
                                                                Rank
                                                              </TableHeaderCell>
                                                            </TableRow>
                                                          </TableHeader>
                                                          <TableBody
                                                            as="tbody"
                                                          />
                                                        </Table>
                                                      </div>
                                                    </GridColumn>
                                                  </GridRow>
                                                </Grid>,
                                                "disabled": true,
                                                "wide": "very",
                                              },
                                            },
                                            "description": "PDB Selector",
                                            "iconName": "tasks",
                                          },
                                        ]
                                      }
                                      onMeasuredProximityChange={[Function]}
                                      onResize={[Function]}
                                      predictedProteins={Array []}
                                      removeAllLockedResiduePairs={[Function]}
                                      removeCandidateResidues={[Function]}
                                      removeHoveredResidues={[Function]}
                                      removeLockedResiduePair={[Function]}
                                      removeNonLockedResidues={[Function]}
                                      selectedSecondaryStructures={Array []}
                                      showConfigurations={true}
                                      width="100%"
                                    >
                                      <ComponentCard
                                        componentName="NGL Viewer"
                                        frameHeight={0}
                                        frameWidth={0}
                                        headerHeight={40}
                                        height="570px"
                                        iconSrc="assets/icons/spring-icon.png"
                                        isFramedComponent={false}
                                        isFullPage={false}
                                        menuItems={
                                          Array [
                                            Object {
                                              "component": Object {
                                                "name": "POPUP",
                                                "props": Object {
                                                  "children": <Grid
                                                    divided={true}
                                                    padded={true}
                                                  >
                                                    <GridRow>
                                                      <GridColumn>
                                                        <Header>
                                                          Select Structures to Display
                                                        </Header>
                                                      </GridColumn>
                                                    </GridRow>
                                                    <GridRow
                                                      columns={2}
                                                      style={
                                                        Object {
                                                          "padding": "5px 0",
                                                        }
                                                      }
                                                    >
                                                      <GridColumn
                                                        width={9}
                                                      >
                                                        Experimental (0/0)
                                                        <div
                                                          style={
                                                            Object {
                                                              "height": "250px",
                                                              "overflow": "auto",
                                                            }
                                                          }
                                                        >
                                                          <Table
                                                            as="table"
                                                            basic="very"
                                                            compact={true}
                                                            padded={true}
                                                          >
                                                            <TableHeader
                                                              as="thead"
                                                            >
                                                              <TableRow
                                                                as="tr"
                                                                cellAs="td"
                                                              >
                                                                <TableHeaderCell
                                                                  as="th"
                                                                  style={
                                                                    Object {
                                                                      "padding": "5px 0",
                                                                    }
                                                                  }
                                                                >
                                                                  Name
                                                                </TableHeaderCell>
                                                                <TableHeaderCell
                                                                  as="th"
                                                                  style={
                                                                    Object {
                                                                      "padding": "5px 0",
                                                                    }
                                                                  }
                                                                >
                                                                  Seq. ID
                                                                </TableHeaderCell>
                                                                <TableHeaderCell
                                                                  as="th"
                                                                  style={
                                                                    Object {
                                                                      "padding": "5px 0",
                                                                    }
                                                                  }
                                                                >
                                                                  Source
                                                                </TableHeaderCell>
                                                              </TableRow>
                                                            </TableHeader>
                                                            <TableBody
                                                              as="tbody"
                                                            />
                                                          </Table>
                                                        </div>
                                                      </GridColumn>
                                                      <GridColumn
                                                        width={7}
                                                      >
                                                        Predicted (0/0)
                                                        <div
                                                          style={
                                                            Object {
                                                              "height": "250px",
                                                              "overflow": "auto",
                                                            }
                                                          }
                                                        >
                                                          <Table
                                                            as="table"
                                                            basic="very"
                                                            compact={true}
                                                            padded={true}
                                                          >
                                                            <TableHeader
                                                              as="thead"
                                                            >
                                                              <TableRow
                                                                as="tr"
                                                                cellAs="td"
                                                              >
                                                                <TableHeaderCell
                                                                  as="th"
                                                                  style={
                                                                    Object {
                                                                      "padding": "5px 0",
                                                                    }
                                                                  }
                                                                >
                                                                  Name
                                                                </TableHeaderCell>
                                                                <TableHeaderCell
                                                                  as="th"
                                                                  style={
                                                                    Object {
                                                                      "padding": "5px 0",
                                                                    }
                                                                  }
                                                                >
                                                                  Rank
                                                                </TableHeaderCell>
                                                              </TableRow>
                                                            </TableHeader>
                                                            <TableBody
                                                              as="tbody"
                                                            />
                                                          </Table>
                                                        </div>
                                                      </GridColumn>
                                                    </GridRow>
                                                  </Grid>,
                                                  "disabled": true,
                                                  "wide": "very",
                                                },
                                              },
                                              "description": "PDB Selector",
                                              "iconName": "tasks",
                                            },
                                            Object {
                                              "component": Object {
                                                "configs": Array [
                                                  Object {
                                                    "name": "Clear Selections",
                                                    "onClick": [Function],
                                                    "type": "BUTTON",
                                                  },
                                                  Object {
                                                    "defaultOption": "Disable",
                                                    "name": "Zoom on Click",
                                                    "onChange": [Function],
                                                    "options": Array [
                                                      "Enable",
                                                      "Disable",
                                                    ],
                                                    "type": "RADIO",
                                                  },
                                                  Object {
                                                    "current": "CLOSEST ATOM",
                                                    "name": "Proximity Metric",
                                                    "onChange": [Function],
                                                    "options": Array [
                                                      "Closest Atom",
                                                      "C-α",
                                                    ],
                                                    "type": "RADIO",
                                                  },
                                                  Object {
                                                    "current": "default",
                                                    "name": "Structure Representation Type",
                                                    "onChange": [Function],
                                                    "options": Array [
                                                      "Default",
                                                      "Spacefill",
                                                      "Backbone",
                                                      "Cartoon",
                                                      "Surface",
                                                      "Tube",
                                                    ],
                                                    "type": "RADIO",
                                                  },
                                                ],
                                                "name": "POPUP",
                                                "props": Object {
                                                  "trigger": <Icon
                                                    as="i"
                                                    name="setting"
                                                  />,
                                                },
                                              },
                                              "description": "Settings",
                                            },
                                          ]
                                        }
                                        padding={0}
                                        showSettings={false}
                                        width="525px"
                                      >
                                        <Card
                                          centered={true}
                                          className="bioblocks-component-card"
                                          style={
                                            Object {
                                              "height": "570px",
                                              "maxWidth": "unset",
                                              "width": "525px",
                                            }
                                          }
                                        >
                                          <div
                                            className="ui centered card bioblocks-component-card"
                                            onClick={[Function]}
                                            style={
                                              Object {
                                                "height": "570px",
                                                "maxWidth": "unset",
                                                "width": "525px",
                                              }
                                            }
                                          >
                                            <ComponentMenuBar
                                              componentName="NGL Viewer"
                                              configurations={Array []}
                                              height={40}
                                              iconSrc="assets/icons/spring-icon.png"
                                              isExpanded={false}
                                              menuItems={
                                                Array [
                                                  Object {
                                                    "component": Object {
                                                      "name": "POPUP",
                                                      "props": Object {
                                                        "children": <Grid
                                                          divided={true}
                                                          padded={true}
                                                        >
                                                          <GridRow>
                                                            <GridColumn>
                                                              <Header>
                                                                Select Structures to Display
                                                              </Header>
                                                            </GridColumn>
                                                          </GridRow>
                                                          <GridRow
                                                            columns={2}
                                                            style={
                                                              Object {
                                                                "padding": "5px 0",
                                                              }
                                                            }
                                                          >
                                                            <GridColumn
                                                              width={9}
                                                            >
                                                              Experimental (0/0)
                                                              <div
                                                                style={
                                                                  Object {
                                                                    "height": "250px",
                                                                    "overflow": "auto",
                                                                  }
                                                                }
                                                              >
                                                                <Table
                                                                  as="table"
                                                                  basic="very"
                                                                  compact={true}
                                                                  padded={true}
                                                                >
                                                                  <TableHeader
                                                                    as="thead"
                                                                  >
                                                                    <TableRow
                                                                      as="tr"
                                                                      cellAs="td"
                                                                    >
                                                                      <TableHeaderCell
                                                                        as="th"
                                                                        style={
                                                                          Object {
                                                                            "padding": "5px 0",
                                                                          }
                                                                        }
                                                                      >
                                                                        Name
                                                                      </TableHeaderCell>
                                                                      <TableHeaderCell
                                                                        as="th"
                                                                        style={
                                                                          Object {
                                                                            "padding": "5px 0",
                                                                          }
                                                                        }
                                                                      >
                                                                        Seq. ID
                                                                      </TableHeaderCell>
                                                                      <TableHeaderCell
                                                                        as="th"
                                                                        style={
                                                                          Object {
                                                                            "padding": "5px 0",
                                                                          }
                                                                        }
                                                                      >
                                                                        Source
                                                                      </TableHeaderCell>
                                                                    </TableRow>
                                                                  </TableHeader>
                                                                  <TableBody
                                                                    as="tbody"
                                                                  />
                                                                </Table>
                                                              </div>
                                                            </GridColumn>
                                                            <GridColumn
                                                              width={7}
                                                            >
                                                              Predicted (0/0)
                                                              <div
                                                                style={
                                                                  Object {
                                                                    "height": "250px",
                                                                    "overflow": "auto",
                                                                  }
                                                                }
                                                              >
                                                                <Table
                                                                  as="table"
                                                                  basic="very"
                                                                  compact={true}
                                                                  padded={true}
                                                                >
                                                                  <TableHeader
                                                                    as="thead"
                                                                  >
                                                                    <TableRow
                                                                      as="tr"
                                                                      cellAs="td"
                                                                    >
                                                                      <TableHeaderCell
                                                                        as="th"
                                                                        style={
                                                                          Object {
                                                                            "padding": "5px 0",
                                                                          }
                                                                        }
                                                                      >
                                                                        Name
                                                                      </TableHeaderCell>
                                                                      <TableHeaderCell
                                                                        as="th"
                                                                        style={
                                                                          Object {
                                                                            "padding": "5px 0",
                                                                          }
                                                                        }
                                                                      >
                                                                        Rank
                                                                      </TableHeaderCell>
                                                                    </TableRow>
                                                                  </TableHeader>
                                                                  <TableBody
                                                                    as="tbody"
                                                                  />
                                                                </Table>
                                                              </div>
                                                            </GridColumn>
                                                          </GridRow>
                                                        </Grid>,
                                                        "disabled": true,
                                                        "wide": "very",
                                                      },
                                                    },
                                                    "description": "PDB Selector",
                                                    "iconName": "tasks",
                                                  },
                                                  Object {
                                                    "component": Object {
                                                      "configs": Array [
                                                        Object {
                                                          "name": "Clear Selections",
                                                          "onClick": [Function],
                                                          "type": "BUTTON",
                                                        },
                                                        Object {
                                                          "defaultOption": "Disable",
                                                          "name": "Zoom on Click",
                                                          "onChange": [Function],
                                                          "options": Array [
                                                            "Enable",
                                                            "Disable",
                                                          ],
                                                          "type": "RADIO",
                                                        },
                                                        Object {
                                                          "current": "CLOSEST ATOM",
                                                          "name": "Proximity Metric",
                                                          "onChange": [Function],
                                                          "options": Array [
                                                            "Closest Atom",
                                                            "C-α",
                                                          ],
                                                          "type": "RADIO",
                                                        },
                                                        Object {
                                                          "current": "default",
                                                          "name": "Structure Representation Type",
                                                          "onChange": [Function],
                                                          "options": Array [
                                                            "Default",
                                                            "Spacefill",
                                                            "Backbone",
                                                            "Cartoon",
                                                            "Surface",
                                                            "Tube",
                                                          ],
                                                          "type": "RADIO",
                                                        },
                                                      ],
                                                      "name": "POPUP",
                                                      "props": Object {
                                                        "trigger": <Icon
                                                          as="i"
                                                          name="setting"
                                                        />,
                                                      },
                                                    },
                                                    "description": "Settings",
                                                  },
                                                ]
                                              }
                                              onExpandToggleCb={[Function]}
                                              opacity={0.85}
                                              width="100%"
                                            >
                                              <div
                                                onMouseEnter={[Function]}
                                                onMouseLeave={[Function]}
                                              >
                                                <Menu
                                                  secondary={true}
                                                  style={
                                                    Object {
                                                      "height": 40,
                                                      "margin": 0,
                                                    }
                                                  }
                                                  widths={2}
                                                >
                                                  <div
                                                    className="ui secondary two item menu"
                                                    style={
                                                      Object {
                                                        "height": 40,
                                                        "margin": 0,
                                                      }
                                                    }
                                                  >
                                                    <Menu
                                                      secondary={true}
                                                      widths={1}
                                                    >
                                                      <div
                                                        className="ui secondary one item menu"
                                                      >
                                                        <MenuItem
                                                          fitted="horizontally"
                                                          position="left"
                                                          style={
                                                            Object {
                                                              "margin": 0,
                                                              "padding": 0,
                                                            }
                                                          }
                                                        >
                                                          <div
                                                            className="left horizontally fitted item"
                                                            onClick={[Function]}
                                                            style={
                                                              Object {
                                                                "margin": 0,
                                                                "padding": 0,
                                                              }
                                                            }
                                                          >
                                                            <img
                                                              alt="component icon"
                                                              src="assets/icons/spring-icon.png"
                                                              style={
                                                                Object {
                                                                  "height": "32px",
                                                                  "padding": "2px",
                                                                  "width": "32px",
                                                                }
                                                              }
                                                            />
                                                            NGL Viewer
                                                          </div>
                                                        </MenuItem>
                                                      </div>
                                                    </Menu>
                                                    <Menu
                                                      secondary={true}
                                                      widths={4}
                                                    >
                                                      <div
                                                        className="ui secondary four item menu"
                                                      >
                                                        <MenuItem
                                                          fitted="horizontally"
                                                          key="NGL Viewer-menu-item-0"
                                                          position="right"
                                                          style={
                                                            Object {
                                                              "flexDirection": "column",
                                                            }
                                                          }
                                                        >
                                                          <div
                                                            className="right horizontally fitted item"
                                                            onClick={[Function]}
                                                            style={
                                                              Object {
                                                                "flexDirection": "column",
                                                              }
                                                            }
                                                          >
                                                            <Popup
                                                              closeOnPortalMouseLeave={false}
                                                              closeOnTriggerClick={true}
                                                              closeOnTriggerMouseLeave={false}
                                                              disabled={true}
                                                              hoverable={false}
                                                              keepInViewPort={true}
                                                              on="hover"
                                                              openOnTriggerClick={true}
                                                              openOnTriggerFocus={false}
                                                              openOnTriggerMouseEnter={false}
                                                              position="bottom center"
                                                              style={
                                                                Object {
                                                                  "opacity": 0.85,
                                                                }
                                                              }
                                                              trigger={
                                                                <Icon
                                                                  as="i"
                                                                  name="tasks"
                                                                />
                                                              }
                                                              wide="very"
                                                            >
                                                              <Icon
                                                                as="i"
                                                                name="tasks"
                                                              >
                                                                <i
                                                                  aria-hidden="true"
                                                                  className="tasks icon"
                                                                  onClick={[Function]}
                                                                />
                                                              </Icon>
                                                            </Popup>
                                                            <span
                                                              style={
                                                                Object {
                                                                  "fontSize": "11px",
                                                                  "visibility": "hidden",
                                                                }
                                                              }
                                                            >
                                                              PDB Selector
                                                            </span>
                                                          </div>
                                                        </MenuItem>
                                                        <MenuItem
                                                          fitted="horizontally"
                                                          key="NGL Viewer-menu-item-1"
                                                          position="right"
                                                          style={
                                                            Object {
                                                              "flexDirection": "column",
                                                            }
                                                          }
                                                        >
                                                          <div
                                                            className="right horizontally fitted item"
                                                            onClick={[Function]}
                                                            style={
                                                              Object {
                                                                "flexDirection": "column",
                                                              }
                                                            }
                                                          >
                                                            <Popup
                                                              closeOnPortalMouseLeave={false}
                                                              closeOnTriggerClick={true}
                                                              closeOnTriggerMouseLeave={false}
                                                              disabled={false}
                                                              hoverable={false}
                                                              keepInViewPort={true}
                                                              on="hover"
                                                              openOnTriggerClick={true}
                                                              openOnTriggerFocus={false}
                                                              openOnTriggerMouseEnter={false}
                                                              position="bottom center"
                                                              style={
                                                                Object {
                                                                  "opacity": 0.85,
                                                                }
                                                              }
                                                              trigger={
                                                                <Icon
                                                                  as="i"
                                                                  name="setting"
                                                                />
                                                              }
                                                              wide={true}
                                                            >
                                                              <Portal
                                                                closeOnDocumentClick={true}
                                                                closeOnEscape={true}
                                                                closeOnPortalMouseLeave={false}
                                                                closeOnTriggerClick={true}
                                                                closeOnTriggerMouseLeave={false}
                                                                eventPool="default"
                                                                mouseEnterDelay={50}
                                                                mouseLeaveDelay={70}
                                                                onClose={[Function]}
                                                                onMount={[Function]}
                                                                onOpen={[Function]}
                                                                onUnmount={[Function]}
                                                                openOnTriggerClick={true}
                                                                openOnTriggerFocus={false}
                                                                openOnTriggerMouseEnter={false}
                                                                trigger={
                                                                  <Icon
                                                                    as="i"
                                                                    name="setting"
                                                                  />
                                                                }
                                                                triggerRef={[Function]}
                                                              >
                                                                <Ref
                                                                  innerRef={[Function]}
                                                                >
                                                                  <RefFindNode
                                                                    innerRef={[Function]}
                                                                  >
                                                                    <Icon
                                                                      as="i"
                                                                      name="setting"
                                                                      onBlur={[Function]}
                                                                      onClick={[Function]}
                                                                      onFocus={[Function]}
                                                                      onMouseEnter={[Function]}
                                                                      onMouseLeave={[Function]}
                                                                    >
                                                                      <i
                                                                        aria-hidden="true"
                                                                        className="setting icon"
                                                                        onBlur={[Function]}
                                                                        onClick={[Function]}
                                                                        onFocus={[Function]}
                                                                        onMouseEnter={[Function]}
                                                                        onMouseLeave={[Function]}
                                                                      />
                                                                    </Icon>
                                                                  </RefFindNode>
                                                                </Ref>
                                                              </Portal>
                                                            </Popup>
                                                            <span
                                                              style={
                                                                Object {
                                                                  "fontSize": "11px",
                                                                  "visibility": "hidden",
                                                                }
                                                              }
                                                            >
                                                              Settings
                                                            </span>
                                                          </div>
                                                        </MenuItem>
                                                        <MenuItem
                                                          fitted="horizontally"
                                                          position="right"
                                                          style={
                                                            Object {
                                                              "flexDirection": "column",
                                                            }
                                                          }
                                                        >
                                                          <div
                                                            className="right horizontally fitted item"
                                                            onClick={[Function]}
                                                            style={
                                                              Object {
                                                                "flexDirection": "column",
                                                              }
                                                            }
                                                          >
                                                            <Icon
                                                              as="i"
                                                              name="expand arrows alternate"
                                                              onClick={[Function]}
                                                            >
                                                              <i
                                                                aria-hidden="true"
                                                                className="expand arrows alternate icon"
                                                                onClick={[Function]}
                                                              />
                                                            </Icon>
                                                            <span
                                                              style={
                                                                Object {
                                                                  "fontSize": "11px",
                                                                  "visibility": "hidden",
                                                                }
                                                              }
                                                            >
                                                              Expand
                                                            </span>
                                                          </div>
                                                        </MenuItem>
                                                      </div>
                                                    </Menu>
                                                  </div>
                                                </Menu>
                                              </div>
                                            </ComponentMenuBar>
                                            <div
                                              className="NGLComponent"
                                              style={
                                                Object {
                                                  "height": "92%",
                                                  "width": "100%",
                                                }
                                              }
                                            >
                                              <Dimmer
                                                active={false}
                                              >
                                                <DimmerInner
                                                  active={false}
                                                >
                                                  <Ref
                                                    innerRef={
                                                      Object {
                                                        "current": <div
                                                          class="ui dimmer"
                                                        >
                                                          <div
                                                            class="content"
                                                          >
                                                            <div
                                                              class="ui loader"
                                                            />
                                                          </div>
                                                        </div>,
                                                      }
                                                    }
                                                  >
                                                    <RefFindNode
                                                      innerRef={
                                                        Object {
                                                          "current": <div
                                                            class="ui dimmer"
                                                          >
                                                            <div
                                                              class="content"
                                                            >
                                                              <div
                                                                class="ui loader"
                                                              />
                                                            </div>
                                                          </div>,
                                                        }
                                                      }
                                                    >
                                                      <div
                                                        className="ui dimmer"
                                                        onClick={[Function]}
                                                      >
                                                        <div
                                                          className="content"
                                                        >
                                                          <Loader>
                                                            <div
                                                              className="ui loader"
                                                            />
                                                          </Loader>
                                                        </div>
                                                      </div>
                                                    </RefFindNode>
                                                  </Ref>
                                                </DimmerInner>
                                              </Dimmer>
                                              <div
                                                className="NGLCanvas"
                                                onKeyDown={[Function]}
                                                onMouseLeave={[Function]}
                                                role="img"
                                                style={
                                                  Object {
                                                    "height": "100%",
                                                    "width": "100%",
                                                  }
                                                }
                                              />
                                            </div>
                                            <Grid>
                                              <div
                                                className="ui grid"
                                              >
                                                <GridRow
                                                  centered={true}
                                                  columns={2}
                                                >
                                                  <div
                                                    className="centered two column row"
                                                  >
                                                    <GridColumn>
                                                      <div
                                                        className="column"
                                                      >
                                                        <div
                                                          style={
                                                            Object {
                                                              "userSelect": "none",
                                                            }
                                                          }
                                                        >
                                                          <a
                                                            aria-pressed={false}
                                                            onClick={[Function]}
                                                            role="button"
                                                          >
                                                            Center View
                                                          </a>
                                                        </div>
                                                      </div>
                                                    </GridColumn>
                                                    <GridColumn>
                                                      <div
                                                        className="column"
                                                      >
                                                        <div
                                                          style={
                                                            Object {
                                                              "userSelect": "none",
                                                            }
                                                          }
                                                        >
                                                          <a
                                                            aria-pressed={false}
                                                            onClick={[Function]}
                                                            role="button"
                                                          >
                                                            Superimpose: off
                                                          </a>
                                                        </div>
                                                      </div>
                                                    </GridColumn>
                                                  </div>
                                                </GridRow>
                                              </div>
                                            </Grid>
                                          </div>
                                        </Card>
                                      </ComponentCard>
                                    </NGLComponent>
                                  </div>
                                </GridRow>
                              </div>
                            </Grid>
                          </NGLContainerClass>
                        </Connect(NGLContainerClass)>
                      </div>
                    </GridColumn>
                  </div>
                </GridRow>
              </div>
            </Grid>
          </div>
        </Segment>
        <footer
          style={
            Object {
              "padding": "25vh 0 25px 25px",
            }
          }
        >
          Powered by 
          <a
            href="https://github.com/cBioCenter/bioblocks-viz"
          >
            Bioblocks
          </a>
          !
        </footer>
      </div>
    </VisualizationPageClass>
  </Connect(VisualizationPageClass)>
</Provider>
`;

exports[`VisualizationPage Should match existing snapshot when no props are provided. 1`] = `
<div
  id="BioblocksVizApp"
  style={
    Object {
      "backgroundColor": "#ffffff",
      "height": "1000px",
    }
  }
>
  <Modal
    centered={true}
    closeOnDimmerClick={true}
    closeOnDocumentClick={false}
    closeOnEscape={true}
    closeOnPortalMouseLeave={true}
    dimmer={true}
    eventPool="Modal"
    onClose={[Function]}
    open={false}
    size="fullscreen"
  >
    <FolderUploadComponent
      onDrop={[Function]}
      style={
        Object {
          "backgroundColor": "lightblue",
          "border": "7px dashed blue",
          "height": "90vmin",
          "textAlign": "center",
        }
      }
    />
  </Modal>
  <ErrorMessageComponent
    couplingScores={
      CouplingContainer {
        "colCounter": 0,
        "contacts": Array [],
        "getCouplingScore": [Function],
        "includes": [Function],
        "indexRange": Object {
          "max": 50,
          "min": 1,
        },
        "rowCounter": 0,
        "scoreSource": "cn",
        "totalStoredContacts": 0,
      }
    }
    errorMsg=""
    mismatches={Array []}
  />
  <Message>
    To get started, please drag and drop onto the page either:
    <br />
    (1) An evcouplings results directory.
    <br />
    (2) Individual .pdb, coupling scores
    <Popup
      content="A file that ends as 'CouplingScores.csv'"
      disabled={false}
      keepInViewPort={true}
      on="hover"
      position="top left"
      trigger={
        <a>
          (?)
        </a>
      }
    />
    , and residue mapping files
    <Popup
      content="A .csv file that starts with 'residue_mapping' - or - A file that ends in .indextable / .indextableplus"
      disabled={false}
      keepInViewPort={true}
      on="hover"
      position="top left"
      trigger={
        <a>
          (?)
        </a>
      }
    />
    .
    <br />
    <br />
     Check out the
    <a
      href="http://evfold.org"
    >
       EVFold
    </a>
     or
    <a
      href="https://evcouplings.org/"
    >
       EVCouplings 
    </a>
     website to get these files.
  </Message>
  <Segment
    attached={true}
    raised={true}
  >
    <Grid
      centered={true}
      padded={true}
      relaxed={true}
    >
      <GridRow
        textAlign="right"
        verticalAlign="bottom"
      >
        <GridColumn
          style={
            Object {
              "height": "100%",
              "width": "auto",
            }
          }
        >
          <Button
            as="button"
            icon="trash"
            label={
              Object {
                "content": "Clean View",
              }
            }
            labelPosition="right"
            onClick={[Function]}
            style={
              Object {
                "height": "100%",
              }
            }
          />
        </GridColumn>
      </GridRow>
      <GridRow>
        <br />
      </GridRow>
      <GridRow
        columns={2}
        verticalAlign="bottom"
      >
        <GridColumn
          width={7}
        >
          <PredictedContactMap
            correctColor="#ff0000"
            data={
              Object {
                "couplingScores": CouplingContainer {
                  "colCounter": 0,
                  "contacts": Array [],
                  "getCouplingScore": [Function],
                  "includes": [Function],
                  "indexRange": Object {
                    "max": 50,
                    "min": 1,
                  },
                  "rowCounter": 0,
                  "scoreSource": "cn",
                  "totalStoredContacts": 0,
                },
                "pdbData": Object {
                  "known": undefined,
                },
                "secondaryStructures": Array [],
              }
            }
            height="100%"
            incorrectColor="#000000"
            isDataLoading={false}
            style={
              Object {
                "backgroundColor": "#ffffff",
              }
            }
            width="100%"
          />
        </GridColumn>
        <GridColumn
          width={7}
        >
          <Connect(NGLContainerClass)
            experimentalProteins={Array []}
            isDataLoading={false}
            measuredProximity="CLOSEST ATOM"
            onMeasuredProximityChange={[Function]}
            predictedProteins={Array []}
          />
        </GridColumn>
      </GridRow>
    </Grid>
  </Segment>
  <footer
    style={
      Object {
        "padding": "25vh 0 25px 25px",
      }
    }
  >
    Powered by 
    <a
      href="https://github.com/cBioCenter/bioblocks-viz"
    >
      Bioblocks
    </a>
    !
  </footer>
</div>
`;

exports[`VisualizationPage Should match existing snapshot when using c-alpha proximity. 1`] = `
<div
  id="BioblocksVizApp"
  style={
    Object {
      "backgroundColor": "#ffffff",
      "height": "1000px",
    }
  }
>
  <Modal
    centered={true}
    closeOnDimmerClick={true}
    closeOnDocumentClick={false}
    closeOnEscape={true}
    closeOnPortalMouseLeave={true}
    dimmer={true}
    eventPool="Modal"
    onClose={[Function]}
    open={false}
    size="fullscreen"
  >
    <FolderUploadComponent
      onDrop={[Function]}
      style={
        Object {
          "backgroundColor": "lightblue",
          "border": "7px dashed blue",
          "height": "90vmin",
          "textAlign": "center",
        }
      }
    />
  </Modal>
  <ErrorMessageComponent
    couplingScores={
      CouplingContainer {
        "colCounter": 0,
        "contacts": Array [],
        "getCouplingScore": [Function],
        "includes": [Function],
        "indexRange": Object {
          "max": 50,
          "min": 1,
        },
        "rowCounter": 0,
        "scoreSource": "cn",
        "totalStoredContacts": 0,
      }
    }
    errorMsg=""
    mismatches={Array []}
  />
  <Message>
    To get started, please drag and drop onto the page either:
    <br />
    (1) An evcouplings results directory.
    <br />
    (2) Individual .pdb, coupling scores
    <Popup
      content="A file that ends as 'CouplingScores.csv'"
      disabled={false}
      keepInViewPort={true}
      on="hover"
      position="top left"
      trigger={
        <a>
          (?)
        </a>
      }
    />
    , and residue mapping files
    <Popup
      content="A .csv file that starts with 'residue_mapping' - or - A file that ends in .indextable / .indextableplus"
      disabled={false}
      keepInViewPort={true}
      on="hover"
      position="top left"
      trigger={
        <a>
          (?)
        </a>
      }
    />
    .
    <br />
    <br />
     Check out the
    <a
      href="http://evfold.org"
    >
       EVFold
    </a>
     or
    <a
      href="https://evcouplings.org/"
    >
       EVCouplings 
    </a>
     website to get these files.
  </Message>
  <Segment
    attached={true}
    raised={true}
  >
    <Grid
      centered={true}
      padded={true}
      relaxed={true}
    >
      <GridRow
        textAlign="right"
        verticalAlign="bottom"
      >
        <GridColumn
          style={
            Object {
              "height": "100%",
              "width": "auto",
            }
          }
        >
          <Button
            as="button"
            icon="trash"
            label={
              Object {
                "content": "Clean View",
              }
            }
            labelPosition="right"
            onClick={[Function]}
            style={
              Object {
                "height": "100%",
              }
            }
          />
        </GridColumn>
      </GridRow>
      <GridRow>
        <br />
      </GridRow>
      <GridRow
        columns={2}
        verticalAlign="bottom"
      >
        <GridColumn
          width={7}
        >
          <PredictedContactMap
            correctColor="#ff0000"
            data={
              Object {
                "couplingScores": CouplingContainer {
                  "colCounter": 0,
                  "contacts": Array [],
                  "getCouplingScore": [Function],
                  "includes": [Function],
                  "indexRange": Object {
                    "max": 50,
                    "min": 1,
                  },
                  "rowCounter": 0,
                  "scoreSource": "cn",
                  "totalStoredContacts": 0,
                },
                "pdbData": Object {
                  "known": undefined,
                },
                "secondaryStructures": Array [],
              }
            }
            height="100%"
            incorrectColor="#000000"
            isDataLoading={false}
            style={
              Object {
                "backgroundColor": "#ffffff",
              }
            }
            width="100%"
          />
        </GridColumn>
        <GridColumn
          width={7}
        >
          <Connect(NGLContainerClass)
            experimentalProteins={Array []}
            isDataLoading={false}
            measuredProximity="C-α"
            onMeasuredProximityChange={[Function]}
            predictedProteins={Array []}
          />
        </GridColumn>
      </GridRow>
    </Grid>
  </Segment>
  <footer
    style={
      Object {
        "padding": "25vh 0 25px 25px",
      }
    }
  >
    Powered by 
    <a
      href="https://github.com/cBioCenter/bioblocks-viz"
    >
      Bioblocks
    </a>
    !
  </footer>
</div>
`;

exports[`VisualizationPage Should match existing snapshot when using closest proximity. 1`] = `
<div
  id="BioblocksVizApp"
  style={
    Object {
      "backgroundColor": "#ffffff",
      "height": "1000px",
    }
  }
>
  <Modal
    centered={true}
    closeOnDimmerClick={true}
    closeOnDocumentClick={false}
    closeOnEscape={true}
    closeOnPortalMouseLeave={true}
    dimmer={true}
    eventPool="Modal"
    onClose={[Function]}
    open={false}
    size="fullscreen"
  >
    <FolderUploadComponent
      onDrop={[Function]}
      style={
        Object {
          "backgroundColor": "lightblue",
          "border": "7px dashed blue",
          "height": "90vmin",
          "textAlign": "center",
        }
      }
    />
  </Modal>
  <ErrorMessageComponent
    couplingScores={
      CouplingContainer {
        "colCounter": 0,
        "contacts": Array [],
        "getCouplingScore": [Function],
        "includes": [Function],
        "indexRange": Object {
          "max": 50,
          "min": 1,
        },
        "rowCounter": 0,
        "scoreSource": "cn",
        "totalStoredContacts": 0,
      }
    }
    errorMsg=""
    mismatches={Array []}
  />
  <Message>
    To get started, please drag and drop onto the page either:
    <br />
    (1) An evcouplings results directory.
    <br />
    (2) Individual .pdb, coupling scores
    <Popup
      content="A file that ends as 'CouplingScores.csv'"
      disabled={false}
      keepInViewPort={true}
      on="hover"
      position="top left"
      trigger={
        <a>
          (?)
        </a>
      }
    />
    , and residue mapping files
    <Popup
      content="A .csv file that starts with 'residue_mapping' - or - A file that ends in .indextable / .indextableplus"
      disabled={false}
      keepInViewPort={true}
      on="hover"
      position="top left"
      trigger={
        <a>
          (?)
        </a>
      }
    />
    .
    <br />
    <br />
     Check out the
    <a
      href="http://evfold.org"
    >
       EVFold
    </a>
     or
    <a
      href="https://evcouplings.org/"
    >
       EVCouplings 
    </a>
     website to get these files.
  </Message>
  <Segment
    attached={true}
    raised={true}
  >
    <Grid
      centered={true}
      padded={true}
      relaxed={true}
    >
      <GridRow
        textAlign="right"
        verticalAlign="bottom"
      >
        <GridColumn
          style={
            Object {
              "height": "100%",
              "width": "auto",
            }
          }
        >
          <Button
            as="button"
            icon="trash"
            label={
              Object {
                "content": "Clean View",
              }
            }
            labelPosition="right"
            onClick={[Function]}
            style={
              Object {
                "height": "100%",
              }
            }
          />
        </GridColumn>
      </GridRow>
      <GridRow>
        <br />
      </GridRow>
      <GridRow
        columns={2}
        verticalAlign="bottom"
      >
        <GridColumn
          width={7}
        >
          <PredictedContactMap
            correctColor="#ff0000"
            data={
              Object {
                "couplingScores": CouplingContainer {
                  "colCounter": 0,
                  "contacts": Array [],
                  "getCouplingScore": [Function],
                  "includes": [Function],
                  "indexRange": Object {
                    "max": 50,
                    "min": 1,
                  },
                  "rowCounter": 0,
                  "scoreSource": "cn",
                  "totalStoredContacts": 0,
                },
                "pdbData": Object {
                  "known": undefined,
                },
                "secondaryStructures": Array [],
              }
            }
            height="100%"
            incorrectColor="#000000"
            isDataLoading={false}
            style={
              Object {
                "backgroundColor": "#ffffff",
              }
            }
            width="100%"
          />
        </GridColumn>
        <GridColumn
          width={7}
        >
          <Connect(NGLContainerClass)
            experimentalProteins={Array []}
            isDataLoading={false}
            measuredProximity="CLOSEST ATOM"
            onMeasuredProximityChange={[Function]}
            predictedProteins={Array []}
          />
        </GridColumn>
      </GridRow>
    </Grid>
  </Segment>
  <footer
    style={
      Object {
        "padding": "25vh 0 25px 25px",
      }
    }
  >
    Powered by 
    <a
      href="https://github.com/cBioCenter/bioblocks-viz"
    >
      Bioblocks
    </a>
    !
  </footer>
</div>
`;
