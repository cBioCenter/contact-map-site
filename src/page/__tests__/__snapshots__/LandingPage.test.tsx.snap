// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`LandingPage Should match existing snapshot when hooked up to a Redux store. 1`] = `
<Provider
  store={
    Object {
      "dispatch": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
      Symbol(observable): [Function],
    }
  }
>
  <LandingPageClass
    clearAllResidues={[Function]}
    clearAllSecondaryStructures={[Function]}
    style={
      Object {
        "backgroundColor": "#ffffff",
      }
    }
  >
    <div
      id="BioblocksVizApp"
      style={
        Object {
          "backgroundColor": "#ffffff",
          "height": "1000px",
        }
      }
    >
      <div>
        <Message>
          <div
            className="ui message"
          >
            To get started, please upload either a PDB (.pdb) or EVCouplings score (.csv) file!
             
            <br />
             Check out the
            <a
              href="http://evfold.org"
            >
               EVFold
            </a>
            , 
            <a
              href="http://sanderlab.org/contact-maps/"
            >
              Sander Lab
            </a>
            , or
            <a
              href="https://evcouplings.org/"
            >
               EVCouplings 
            </a>
             website to get these files.
          </div>
        </Message>
        <Segment
          attached={true}
          raised={true}
        >
          <div
            className="ui raised attached segment"
          >
            <Grid
              centered={true}
              padded={true}
              relaxed={true}
            >
              <div
                className="ui centered padded relaxed grid"
              >
                <GridRow
                  columns={4}
                  textAlign="center"
                  verticalAlign="bottom"
                >
                  <div
                    className="center aligned bottom aligned four column row"
                  >
                    <GridColumn>
                      <div
                        className="column"
                      >
                        <GridRow>
                          <div
                            className="row"
                          >
                            <FolderUploadComponent
                              onDrop={[Function]}
                              style={
                                Object {
                                  "border": "3px dashed black",
                                }
                              }
                            >
                              <Dropzone
                                onDrop={[Function]}
                              >
                                <section>
                                  <div
                                    onBlur={[Function]}
                                    onClick={[Function]}
                                    onDragEnter={[Function]}
                                    onDragLeave={[Function]}
                                    onDragOver={[Function]}
                                    onDrop={[Function]}
                                    onFocus={[Function]}
                                    onKeyDown={[Function]}
                                    style={
                                      Object {
                                        "border": "3px dashed black",
                                      }
                                    }
                                    tabIndex={0}
                                  >
                                    <input
                                      autoComplete="off"
                                      multiple={true}
                                      onChange={[Function]}
                                      onClick={[Function]}
                                      style={
                                        Object {
                                          "display": "none",
                                        }
                                      }
                                      tabIndex={-1}
                                      type="file"
                                    />
                                    <p>
                                      Drag 'n' drop some files here, or click to select files
                                    </p>
                                  </div>
                                </section>
                              </Dropzone>
                            </FolderUploadComponent>
                          </div>
                        </GridRow>
                      </div>
                    </GridColumn>
                    <GridColumn>
                      <div
                        className="column"
                      >
                        <GridRow
                          centered={true}
                          columns={1}
                          verticalAlign="middle"
                        >
                          <div
                            className="centered middle aligned one column row"
                          >
                            <GridColumn>
                              <div
                                className="column"
                              >
                                <Label
                                  as="label"
                                  basic={true}
                                  htmlFor="clear-data"
                                >
                                  <label
                                    className="ui basic label"
                                    htmlFor="clear-data"
                                    onClick={[Function]}
                                  >
                                    <Button
                                      as="button"
                                      icon="trash"
                                      label={
                                        Object {
                                          "basic": true,
                                          "content": "Clean View",
                                        }
                                      }
                                      labelPosition="right"
                                      onClick={[Function]}
                                    >
                                      <div
                                        className="ui right labeled button"
                                        onClick={[Function]}
                                      >
                                        <button
                                          className="ui icon button"
                                          tabIndex={0}
                                        >
                                          <Icon
                                            as="i"
                                            name="trash"
                                          >
                                            <i
                                              aria-hidden="true"
                                              className="trash icon"
                                              onClick={[Function]}
                                            />
                                          </Icon>
                                           
                                        </button>
                                        <Label
                                          basic={true}
                                          content="Clean View"
                                          pointing="left"
                                        >
                                          <div
                                            className="ui left pointing basic label"
                                            onClick={[Function]}
                                          >
                                            Clean View
                                          </div>
                                        </Label>
                                      </div>
                                    </Button>
                                  </label>
                                </Label>
                              </div>
                            </GridColumn>
                          </div>
                        </GridRow>
                      </div>
                    </GridColumn>
                  </div>
                </GridRow>
                <GridRow>
                  <div
                    className="row"
                  >
                    <br />
                  </div>
                </GridRow>
                <GridRow
                  columns={2}
                >
                  <div
                    className="two column row"
                  >
                    <GridColumn
                      width={7}
                    >
                      <div
                        className="seven wide column"
                      >
                        <Connect(ContactMapClass)
                          data={
                            Object {
                              "couplingScores": CouplingContainer {
                                "colCounter": 0,
                                "contacts": Array [],
                                "getCouplingScore": [Function],
                                "includes": [Function],
                                "indexRange": Object {
                                  "max": 50,
                                  "min": 1,
                                },
                                "rowCounter": 0,
                                "totalStoredContacts": 0,
                              },
                              "pdbData": Object {
                                "known": undefined,
                              },
                              "secondaryStructures": Array [],
                            }
                          }
                          height="500px"
                          isDataLoading={false}
                          style={
                            Object {
                              "backgroundColor": "#ffffff",
                            }
                          }
                          width="500px"
                        >
                          <ContactMapClass
                            addHoveredResidues={[Function]}
                            addHoveredSecondaryStructure={[Function]}
                            addSelectedSecondaryStructure={[Function]}
                            candidateResidues={Array []}
                            configurations={Array []}
                            data={
                              Object {
                                "couplingScores": CouplingContainer {
                                  "colCounter": 0,
                                  "contacts": Array [],
                                  "getCouplingScore": [Function],
                                  "includes": [Function],
                                  "indexRange": Object {
                                    "max": 50,
                                    "min": 1,
                                  },
                                  "rowCounter": 0,
                                  "totalStoredContacts": 0,
                                },
                                "pdbData": Object {
                                  "known": undefined,
                                },
                                "secondaryStructures": Array [],
                              }
                            }
                            enableSliders={true}
                            formattedPoints={Array []}
                            height="500px"
                            highlightColor="#ff8800"
                            hoveredResidues={Array []}
                            hoveredSecondaryStructures={Array []}
                            isDataLoading={false}
                            lockedResiduePairs={Object {}}
                            observedColor="#0000ff"
                            removeAllLockedResiduePairs={[Function]}
                            removeHoveredResidues={[Function]}
                            removeHoveredSecondaryStructure={[Function]}
                            removeSecondaryStructure={[Function]}
                            selectedSecondaryStructures={Array []}
                            showConfigurations={true}
                            style={
                              Object {
                                "backgroundColor": "#ffffff",
                              }
                            }
                            toggleLockedResiduePair={[Function]}
                            width="500px"
                          >
                            <ComponentCard
                              componentName="Contact Map"
                              frameHeight={0}
                              frameWidth={0}
                              headerHeight={32}
                              height="525px"
                              iconSrc="assets/icons/spring-icon.png"
                              isFramedComponent={false}
                              isFullPage={false}
                              padding={0}
                              showSettings={false}
                              width="525px"
                            >
                              <Card
                                centered={true}
                                className="bioblocks-component-card"
                                style={
                                  Object {
                                    "height": "525px",
                                    "maxWidth": "unset",
                                    "padding": "0 0 5px 5px",
                                    "width": "525px",
                                  }
                                }
                              >
                                <div
                                  className="ui centered card bioblocks-component-card"
                                  onClick={[Function]}
                                  style={
                                    Object {
                                      "height": "525px",
                                      "maxWidth": "unset",
                                      "padding": "0 0 5px 5px",
                                      "width": "525px",
                                    }
                                  }
                                >
                                  <Menu
                                    secondary={true}
                                    style={
                                      Object {
                                        "height": 32,
                                        "margin": 0,
                                      }
                                    }
                                  >
                                    <div
                                      className="ui secondary menu"
                                      style={
                                        Object {
                                          "height": 32,
                                          "margin": 0,
                                        }
                                      }
                                    >
                                      <MenuItem
                                        fitted="horizontally"
                                        position="left"
                                        style={
                                          Object {
                                            "margin": 0,
                                          }
                                        }
                                      >
                                        <div
                                          className="left horizontally fitted item"
                                          onClick={[Function]}
                                          style={
                                            Object {
                                              "margin": 0,
                                            }
                                          }
                                        >
                                          <img
                                            alt="component icon"
                                            src="assets/icons/spring-icon.png"
                                            style={
                                              Object {
                                                "height": "32px",
                                                "padding": "2px",
                                                "width": "32px",
                                              }
                                            }
                                          />
                                          Contact Map
                                        </div>
                                      </MenuItem>
                                      <MenuItem
                                        fitted="horizontally"
                                        position="right"
                                        style={
                                          Object {
                                            "margin": 0,
                                          }
                                        }
                                      >
                                        <div
                                          className="right horizontally fitted item"
                                          onClick={[Function]}
                                          style={
                                            Object {
                                              "margin": 0,
                                            }
                                          }
                                        >
                                          <Icon
                                            as="i"
                                            name="expand arrows alternate"
                                            onClick={[Function]}
                                          >
                                            <i
                                              aria-hidden="true"
                                              className="expand arrows alternate icon"
                                              onClick={[Function]}
                                            />
                                          </Icon>
                                        </div>
                                      </MenuItem>
                                    </div>
                                  </Menu>
                                  <div
                                    style={
                                      Object {
                                        "height": "90%",
                                        "width": "100%",
                                      }
                                    }
                                  >
                                    <ContactMapChart
                                      candidateResidues={Array []}
                                      configurations={
                                        Array [
                                          Object {
                                            "name": "Clear Selections",
                                            "onClick": [Function],
                                            "type": "BUTTON",
                                          },
                                          Object {
                                            "id": "node-size-slider-0",
                                            "name": "Node size for Predicted Structure Contact",
                                            "onChange": [Function],
                                            "type": "SLIDER",
                                            "values": Object {
                                              "current": 4,
                                              "max": 20,
                                              "min": 1,
                                            },
                                          },
                                          Object {
                                            "id": "node-size-slider-1",
                                            "name": "Node size for Selected Residue Pairs",
                                            "onChange": [Function],
                                            "type": "SLIDER",
                                            "values": Object {
                                              "current": 6,
                                              "max": 20,
                                              "min": 1,
                                            },
                                          },
                                        ]
                                      }
                                      contactData={
                                        Array [
                                          Object {
                                            "hoverinfo": "text",
                                            "marker": Object {
                                              "colorscale": Array [
                                                Array [
                                                  0,
                                                  "rgb(12,50,102)",
                                                ],
                                                Array [
                                                  0.1,
                                                  "rgb(17,83,150)",
                                                ],
                                                Array [
                                                  0.2,
                                                  "rgb(40,114,175)",
                                                ],
                                                Array [
                                                  0.3,
                                                  "rgb(71,147,193)",
                                                ],
                                                Array [
                                                  0.4,
                                                  "rgb(111,175,209)",
                                                ],
                                                Array [
                                                  0.5,
                                                  "rgb(160,202,222)",
                                                ],
                                                Array [
                                                  0.6,
                                                  "rgb(200,219,237)",
                                                ],
                                                Array [
                                                  0.7,
                                                  "rgb(224,235,246)",
                                                ],
                                                Array [
                                                  0.8,
                                                  "rgb(247,251,255)",
                                                ],
                                                Array [
                                                  0.9,
                                                  "rgb(249,253,255)",
                                                ],
                                                Array [
                                                  1,
                                                  "rgb(255,255,255)",
                                                ],
                                              ],
                                            },
                                            "mode": "lines+markers",
                                            "name": "Predicted Structure Contact",
                                            "nodeSize": 4,
                                            "points": Array [],
                                            "subtitle": "(from PDB structure)",
                                            "text": Array [],
                                          },
                                          Object {
                                            "hoverinfo": "none",
                                            "marker": Object {
                                              "color": Array [],
                                              "line": Object {
                                                "color": "#ff8800",
                                                "width": 3,
                                              },
                                              "symbol": "circle-open",
                                            },
                                            "mode": "lines+markers",
                                            "name": "Selected Residue Pairs",
                                            "nodeSize": 6,
                                            "points": Array [],
                                            "subtitle": "",
                                          },
                                        ]
                                      }
                                      dataTransformFn={[Function]}
                                      height="100%"
                                      legendModifiers={
                                        Object {
                                          "y": -0.4,
                                        }
                                      }
                                      marginModifiers={
                                        Object {
                                          "b": 65,
                                          "l": 65,
                                        }
                                      }
                                      onClickCallback={[Function]}
                                      onHoverCallback={[Function]}
                                      onSelectedCallback={[Function]}
                                      onUnHoverCallback={[Function]}
                                      range={70}
                                      secondaryStructures={Array []}
                                      selectedSecondaryStructures={
                                        Array [
                                          Array [],
                                        ]
                                      }
                                      selectedSecondaryStructuresColor="#feb83f"
                                      showConfigurations={true}
                                      width="100%"
                                    >
                                      <PlotlyChart
                                        candidateResidues={Array []}
                                        config={Object {}}
                                        data={
                                          Array [
                                            Object {
                                              "hoverinfo": "text",
                                              "marker": Object {
                                                "color": Array [],
                                                "colorscale": Array [
                                                  Array [
                                                    0,
                                                    "rgb(12,50,102)",
                                                  ],
                                                  Array [
                                                    0.1,
                                                    "rgb(17,83,150)",
                                                  ],
                                                  Array [
                                                    0.2,
                                                    "rgb(40,114,175)",
                                                  ],
                                                  Array [
                                                    0.3,
                                                    "rgb(71,147,193)",
                                                  ],
                                                  Array [
                                                    0.4,
                                                    "rgb(111,175,209)",
                                                  ],
                                                  Array [
                                                    0.5,
                                                    "rgb(160,202,222)",
                                                  ],
                                                  Array [
                                                    0.6,
                                                    "rgb(200,219,237)",
                                                  ],
                                                  Array [
                                                    0.7,
                                                    "rgb(224,235,246)",
                                                  ],
                                                  Array [
                                                    0.8,
                                                    "rgb(247,251,255)",
                                                  ],
                                                  Array [
                                                    0.9,
                                                    "rgb(249,253,255)",
                                                  ],
                                                  Array [
                                                    1,
                                                    "rgb(255,255,255)",
                                                  ],
                                                ],
                                                "size": 4,
                                              },
                                              "mode": "markers",
                                              "name": "Predicted Structure Contact (from PDB structure)",
                                              "text": Array [],
                                              "type": "scattergl",
                                              "x": Array [],
                                              "y": Array [],
                                              "z": Array [],
                                            },
                                            Object {
                                              "hoverinfo": "none",
                                              "marker": Object {
                                                "color": Array [],
                                                "line": Object {
                                                  "color": "#ff8800",
                                                  "width": 3,
                                                },
                                                "size": 6,
                                                "symbol": "circle-open",
                                              },
                                              "mode": "markers",
                                              "name": "Selected Residue Pairs ",
                                              "text": Array [],
                                              "type": "scattergl",
                                              "x": Array [],
                                              "y": Array [],
                                              "z": Array [],
                                            },
                                          ]
                                        }
                                        dataTransformFn={[Function]}
                                        height="100%"
                                        layout={
                                          Object {
                                            "legend": Object {
                                              "orientation": "h",
                                              "y": -0.4,
                                              "yanchor": "bottom",
                                            },
                                            "margin": Object {
                                              "b": 65,
                                              "l": 65,
                                            },
                                            "showlegend": false,
                                            "xaxis": Object {
                                              "autorange": true,
                                              "fixedrange": true,
                                              "nticks": 10,
                                              "range": Array [
                                                0,
                                                33000,
                                              ],
                                              "rangemode": "nonnegative",
                                              "showline": true,
                                              "tickmode": "auto",
                                              "title": "Residue #",
                                            },
                                            "yaxis": Object {
                                              "autorange": "reversed",
                                              "fixedrange": true,
                                              "nticks": 10,
                                              "range": Array [
                                                0,
                                                33000,
                                              ],
                                              "rangemode": "nonnegative",
                                              "showline": true,
                                              "tickmode": "auto",
                                              "title": "Residue #",
                                            },
                                          }
                                        }
                                        onClickCallback={[Function]}
                                        onHoverCallback={[Function]}
                                        onSelectedCallback={[Function]}
                                        onUnHoverCallback={[Function]}
                                        secondaryStructures={Array []}
                                        selectedSecondaryStructures={
                                          Array [
                                            Array [],
                                          ]
                                        }
                                        selectedSecondaryStructuresColor="#feb83f"
                                        showLoader={true}
                                        width="100%"
                                      >
                                        <Dimmer
                                          active={false}
                                        >
                                          <DimmerInner
                                            active={false}
                                          >
                                            <Ref
                                              innerRef={
                                                Object {
                                                  "current": <div
                                                    class="ui dimmer"
                                                    style=""
                                                  >
                                                    <div
                                                      class="content"
                                                    >
                                                      <div
                                                        class="ui loader"
                                                      />
                                                    </div>
                                                  </div>,
                                                }
                                              }
                                            >
                                              <RefFindNode
                                                innerRef={
                                                  Object {
                                                    "current": <div
                                                      class="ui dimmer"
                                                      style=""
                                                    >
                                                      <div
                                                        class="content"
                                                      >
                                                        <div
                                                          class="ui loader"
                                                        />
                                                      </div>
                                                    </div>,
                                                  }
                                                }
                                              >
                                                <div
                                                  className="ui dimmer"
                                                  onClick={[Function]}
                                                >
                                                  <div
                                                    className="content"
                                                  >
                                                    <Loader>
                                                      <div
                                                        className="ui loader"
                                                      />
                                                    </Loader>
                                                  </div>
                                                </div>
                                              </RefFindNode>
                                            </Ref>
                                          </DimmerInner>
                                        </Dimmer>
                                        <div
                                          className="plotly-chart"
                                          style={
                                            Object {
                                              "height": "100%",
                                              "marginBottom": 5,
                                              "width": "100%",
                                            }
                                          }
                                        />
                                      </PlotlyChart>
                                    </ContactMapChart>
                                  </div>
                                </div>
                              </Card>
                            </ComponentCard>
                          </ContactMapClass>
                        </Connect(ContactMapClass)>
                      </div>
                    </GridColumn>
                    <GridColumn
                      width={7}
                    >
                      <div
                        className="seven wide column"
                      >
                        <Connect(NGLContainerClass)
                          isDataLoading={false}
                          measuredProximity="CLOSEST"
                          onMeasuredProximityChange={[Function]}
                        >
                          <NGLContainerClass
                            addCandidateResidues={[Function]}
                            addHoveredResidues={[Function]}
                            addLockedResiduePair={[Function]}
                            candidateResidues={Array []}
                            data={
                              BioblocksPDB {
                                "fileName": "",
                                "nglData": MockStructure {
                                  "atomMap": Object {
                                    "dict": Object {
                                      "CA|C": 2,
                                    },
                                  },
                                  "eachResidue": [MockFunction],
                                  "getAtomProxy": [MockFunction],
                                  "getResidueProxy": [MockFunction],
                                  "getSequence": [MockFunction],
                                  "name": undefined,
                                  "residueMap": Object {
                                    "list": Array [],
                                  },
                                  "residueStore": Object {
                                    "atomCount": Array [
                                      2,
                                      2,
                                    ],
                                    "atomOffset": Array [
                                      0,
                                      2,
                                    ],
                                    "residueTypeId": Array [
                                      2,
                                      1,
                                      1,
                                      2,
                                    ],
                                    "resno": Array [
                                      1,
                                      2,
                                    ],
                                  },
                                },
                              }
                            }
                            dispatchNglFetch={[Function]}
                            hoveredResidues={Array []}
                            hoveredSecondaryStructures={Array []}
                            isDataLoading={false}
                            lockedResiduePairs={Immutable.Map {}}
                            measuredProximity="CLOSEST"
                            onMeasuredProximityChange={[Function]}
                            removeAllLockedResiduePairs={[Function]}
                            removeCandidateResidues={[Function]}
                            removeHoveredResidues={[Function]}
                            removeLockedResiduePair={[Function]}
                            removeNonLockedResidues={[Function]}
                            selectedSecondaryStructures={Array []}
                            showConfigurations={true}
                          >
                            <NGLComponent
                              addCandidateResidues={[Function]}
                              addHoveredResidues={[Function]}
                              addLockedResiduePair={[Function]}
                              backgroundColor="#ffffff"
                              candidateResidues={Array []}
                              data={
                                BioblocksPDB {
                                  "fileName": "",
                                  "nglData": MockStructure {
                                    "atomMap": Object {
                                      "dict": Object {
                                        "CA|C": 2,
                                      },
                                    },
                                    "eachResidue": [MockFunction],
                                    "getAtomProxy": [MockFunction],
                                    "getResidueProxy": [MockFunction],
                                    "getSequence": [MockFunction],
                                    "name": undefined,
                                    "residueMap": Object {
                                      "list": Array [],
                                    },
                                    "residueStore": Object {
                                      "atomCount": Array [
                                        2,
                                        2,
                                      ],
                                      "atomOffset": Array [
                                        0,
                                        2,
                                      ],
                                      "residueTypeId": Array [
                                        2,
                                        1,
                                        1,
                                        2,
                                      ],
                                      "resno": Array [
                                        1,
                                        2,
                                      ],
                                    },
                                  },
                                }
                              }
                              dispatchNglFetch={[Function]}
                              dispatchPdbFetch={[Function]}
                              height="90%"
                              hoveredResidues={Array []}
                              hoveredSecondaryStructures={Array []}
                              isDataLoading={false}
                              lockedResiduePairs={Object {}}
                              measuredProximity="CLOSEST"
                              onMeasuredProximityChange={[Function]}
                              onResize={[Function]}
                              removeAllLockedResiduePairs={[Function]}
                              removeCandidateResidues={[Function]}
                              removeHoveredResidues={[Function]}
                              removeLockedResiduePair={[Function]}
                              removeNonLockedResidues={[Function]}
                              selectedSecondaryStructures={Array []}
                              showConfigurations={true}
                              width="100%"
                            >
                              <ComponentCard
                                componentName="NGL Viewer"
                                frameHeight={0}
                                frameWidth={0}
                                headerHeight={32}
                                height="525px"
                                iconSrc="assets/icons/spring-icon.png"
                                isFramedComponent={false}
                                isFullPage={false}
                                padding={0}
                                showSettings={false}
                                width="525px"
                              >
                                <Card
                                  centered={true}
                                  className="bioblocks-component-card"
                                  style={
                                    Object {
                                      "height": "525px",
                                      "maxWidth": "unset",
                                      "padding": "0 0 5px 5px",
                                      "width": "525px",
                                    }
                                  }
                                >
                                  <div
                                    className="ui centered card bioblocks-component-card"
                                    onClick={[Function]}
                                    style={
                                      Object {
                                        "height": "525px",
                                        "maxWidth": "unset",
                                        "padding": "0 0 5px 5px",
                                        "width": "525px",
                                      }
                                    }
                                  >
                                    <Menu
                                      secondary={true}
                                      style={
                                        Object {
                                          "height": 32,
                                          "margin": 0,
                                        }
                                      }
                                    >
                                      <div
                                        className="ui secondary menu"
                                        style={
                                          Object {
                                            "height": 32,
                                            "margin": 0,
                                          }
                                        }
                                      >
                                        <MenuItem
                                          fitted="horizontally"
                                          position="left"
                                          style={
                                            Object {
                                              "margin": 0,
                                            }
                                          }
                                        >
                                          <div
                                            className="left horizontally fitted item"
                                            onClick={[Function]}
                                            style={
                                              Object {
                                                "margin": 0,
                                              }
                                            }
                                          >
                                            <img
                                              alt="component icon"
                                              src="assets/icons/spring-icon.png"
                                              style={
                                                Object {
                                                  "height": "32px",
                                                  "padding": "2px",
                                                  "width": "32px",
                                                }
                                              }
                                            />
                                            NGL Viewer
                                          </div>
                                        </MenuItem>
                                        <MenuItem
                                          fitted="horizontally"
                                          position="right"
                                          style={
                                            Object {
                                              "margin": 0,
                                            }
                                          }
                                        >
                                          <div
                                            className="right horizontally fitted item"
                                            onClick={[Function]}
                                            style={
                                              Object {
                                                "margin": 0,
                                              }
                                            }
                                          >
                                            <Icon
                                              as="i"
                                              name="expand arrows alternate"
                                              onClick={[Function]}
                                            >
                                              <i
                                                aria-hidden="true"
                                                className="expand arrows alternate icon"
                                                onClick={[Function]}
                                              />
                                            </Icon>
                                          </div>
                                        </MenuItem>
                                      </div>
                                    </Menu>
                                    <div
                                      className="NGLComponent"
                                      style={
                                        Object {
                                          "height": "90%",
                                          "width": "100%",
                                        }
                                      }
                                    >
                                      <div
                                        className="NGLCanvas"
                                        onKeyDown={[Function]}
                                        onMouseLeave={[Function]}
                                        role="img"
                                        style={
                                          Object {
                                            "height": "100%",
                                            "width": "100%",
                                          }
                                        }
                                      />
                                    </div>
                                  </div>
                                </Card>
                              </ComponentCard>
                            </NGLComponent>
                          </NGLContainerClass>
                        </Connect(NGLContainerClass)>
                      </div>
                    </GridColumn>
                  </div>
                </GridRow>
              </div>
            </Grid>
          </div>
        </Segment>
        <footer
          style={
            Object {
              "padding": "25vh 0 25px 25px",
            }
          }
        >
          Powered by 
          <a
            href="https://github.com/cBioCenter/bioblocks-viz"
          >
            Bioblocks
          </a>
          !
        </footer>
      </div>
    </div>
  </LandingPageClass>
</Provider>
`;

exports[`LandingPage Should match existing snapshot when no props are provided. 1`] = `
<div
  id="BioblocksVizApp"
  style={
    Object {
      "backgroundColor": "#ffffff",
      "height": "1000px",
    }
  }
>
  <div>
    <Message>
      To get started, please upload either a PDB (.pdb) or EVCouplings score (.csv) file!
       
      <br />
       Check out the
      <a
        href="http://evfold.org"
      >
         EVFold
      </a>
      , 
      <a
        href="http://sanderlab.org/contact-maps/"
      >
        Sander Lab
      </a>
      , or
      <a
        href="https://evcouplings.org/"
      >
         EVCouplings 
      </a>
       website to get these files.
    </Message>
    <Segment
      attached={true}
      raised={true}
    >
      <Grid
        centered={true}
        padded={true}
        relaxed={true}
      >
        <GridRow
          columns={4}
          textAlign="center"
          verticalAlign="bottom"
        >
          <GridColumn>
            <GridRow>
              <FolderUploadComponent
                onDrop={[Function]}
                style={
                  Object {
                    "border": "3px dashed black",
                  }
                }
              />
            </GridRow>
          </GridColumn>
          <GridColumn>
            <GridRow
              centered={true}
              columns={1}
              verticalAlign="middle"
            >
              <GridColumn>
                <Label
                  as="label"
                  basic={true}
                  htmlFor="clear-data"
                >
                  <Button
                    as="button"
                    icon="trash"
                    label={
                      Object {
                        "basic": true,
                        "content": "Clean View",
                      }
                    }
                    labelPosition="right"
                    onClick={[Function]}
                  />
                </Label>
              </GridColumn>
            </GridRow>
          </GridColumn>
        </GridRow>
        <GridRow>
          <br />
        </GridRow>
        <GridRow
          columns={2}
        >
          <GridColumn
            width={7}
          >
            <Connect(ContactMapClass)
              data={
                Object {
                  "couplingScores": CouplingContainer {
                    "colCounter": 0,
                    "contacts": Array [],
                    "getCouplingScore": [Function],
                    "includes": [Function],
                    "indexRange": Object {
                      "max": 50,
                      "min": 1,
                    },
                    "rowCounter": 0,
                    "totalStoredContacts": 0,
                  },
                  "pdbData": Object {
                    "known": undefined,
                  },
                  "secondaryStructures": Array [],
                }
              }
              height="500px"
              isDataLoading={false}
              style={
                Object {
                  "backgroundColor": "#ffffff",
                }
              }
              width="500px"
            />
          </GridColumn>
          <GridColumn
            width={7}
          >
            <Connect(NGLContainerClass)
              isDataLoading={false}
              measuredProximity="CLOSEST"
              onMeasuredProximityChange={[Function]}
            />
          </GridColumn>
        </GridRow>
      </Grid>
    </Segment>
    <footer
      style={
        Object {
          "padding": "25vh 0 25px 25px",
        }
      }
    >
      Powered by 
      <a
        href="https://github.com/cBioCenter/bioblocks-viz"
      >
        Bioblocks
      </a>
      !
    </footer>
  </div>
</div>
`;
